#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef FLEKSYKEYBOARDSDK_SWIFT_H
#define FLEKSYKEYBOARDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <FleksyKeyboardSDK/FleksyKeyboardSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FleksyKeyboardSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class UITextInputMode;
@class NSUUID;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK20AppTextDocumentProxy")
@interface AppTextDocumentProxy : NSObject <UITextDocumentProxy>
@property (nonatomic, readonly, copy) NSString * _Nullable documentContextBeforeInput;
@property (nonatomic, readonly, copy) NSString * _Nullable documentContextAfterInput;
@property (nonatomic, readonly, copy) NSString * _Nullable selectedText;
@property (nonatomic, readonly, strong) UITextInputMode * _Nullable documentInputMode;
@property (nonatomic, copy) NSUUID * _Nonnull documentIdentifier;
- (void)adjustTextPositionByCharacterOffset:(NSInteger)offset;
- (void)setMarkedText:(NSString * _Nonnull)markedText selectedRange:(NSRange)selectedRange;
- (void)unmarkText;
@property (nonatomic, readonly) BOOL hasText;
- (void)insertText:(NSString * _Nonnull)text;
- (void)deleteBackward;
/// Initialized to default values as per Apple’s documentation
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
@property (nonatomic) UIKeyboardType keyboardType;
@property (nonatomic) UIReturnKeyType returnKeyType;
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIInputViewController;
@class NSCoder;
@protocol UITextFieldDelegate;

/// This class allows FleksyApps to have text fields in their view hierarchy.
/// The user will be able to manually switch between the text input in the host app (that opened the keyboard) and the <code>AppTextField</code>s and <code>AppTextView</code>s inside FleksyApps by just tapping the text field/view they want the keyboard to focus on.
/// You can use <code>becomeFirstResponder()</code> and <code>resignFirstResponder()</code> on <code>AppTextField</code>s as you would normally do with any <code>UITextInput</code> to programmatically focus the keyboard on the <code>AppTextField</code> or remove the focus from it. When you <code>resignFirstResponder()</code> on <code>AppTextField</code> that is currently the first responder, the focus of the keyboard is moved back to the host app.
/// important:
/// <code>AppTextField</code> and <code>AppTextView</code> are the only supported ways to have text input inside FleksyApps. This means that using a <code>UITextField</code>, a <code>UITextField</code> subclass that does not inherit from <code>AppTextField</code>, a <code>UITextView</code>, a <code>UITextView</code> subclass that does not inherit from <code>AppTextView</code> or any other <code>UITextInput</code> object are not supported inside FleksyApps.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK12AppTextField")
@interface AppTextField : UITextField
/// <code>AppTextField</code> overrides this property and returns a <code>clear</code> color when the text field is not the first responder.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
@property (nonatomic, readonly, strong) UIInputViewController * _Nullable inputViewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (void)insertText:(NSString * _Nonnull)text;
@property (nonatomic, strong) id <UITextFieldDelegate> _Nullable delegate;
/// The autocapitalization style for the <code>AppTextField</code>. Defaults to <code>UITextAutocapitalizationType.sentences</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocapitalizationType</code> to read the autocapitalization style instead.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the <code>AppTextField</code>. Defaults to <code>UITextAutocorrectionType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocorrectionType</code> to read the autocorrection style instead.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The appearance style of the keyboard for the <code>AppTextField</code>. Defaults to <code>UIKeyboardAppearance.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardAppearance</code> to read the appearance style of the keyboard instead.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// The keyboard type for the <code>AppTextField</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardType</code> to read the keyboard type instead.
@property (nonatomic) UIKeyboardType keyboardType;
/// The type of the Return key for the <code>AppTextField</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualReturnKeyType</code> to read the type of the Return key instead.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The configuration state for the smart insertion and deletion of space characters for the <code>AppTextField</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualSmartInsertDeleteType</code> to read the configuration state for the smart insertion and deletion of space characters instead.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType;
@end



/// Abstract class for overlay views in top bar (apps carousel, bar with text field, …)
SWIFT_CLASS("_TtC17FleksyKeyboardSDK17TapBarOverlayView")
@interface TapBarOverlayView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// View for keyboard apps to have a search bar in the top bar.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK15AppTextFieldBar")
@interface AppTextFieldBar : TapBarOverlayView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)actionAppIcon:(id _Nullable)sender;
- (void)actionClose:(id _Nullable)sender;
- (void)actionTextChange:(AppTextField * _Nonnull)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



@interface AppTextFieldBar (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UITextInput;
@class NSBundle;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK31AppTextFieldInputViewController")
@interface AppTextFieldInputViewController : UIInputViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)textDidChange:(id <UITextInput> _Nullable)textInput;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSTextContainer;
@protocol UITextViewDelegate;

/// This class allows FleksyApps to have text views in their view hierarchy.
/// The user will be able to manually switch between the text input in the host app (that opened the keyboard) and the <code>AppTextField</code>s and <code>AppTextView</code>s inside FleksyApps by just tapping the text field/view they want the keyboard to focus on.
/// You can use <code>becomeFirstResponder()</code> and <code>resignFirstResponder()</code> on <code>AppTextView</code>s as you would normally do with any <code>UITextInput</code> to programmatically focus the keyboard on the <code>AppTextView</code> or remove the focus from it. When you <code>resignFirstResponder()</code> on <code>AppTextView</code> that is currently the first responder, the focus of the keyboard is moved back to the host app.
/// important:
/// <code>AppTextField</code> and <code>AppTextView</code> are the only supported ways to have text input inside FleksyApps. This means that using a <code>UITextField</code>, a <code>UITextField</code> subclass that does not inherit from <code>AppTextField</code>, a <code>UITextView</code>, a <code>UITextView</code> subclass that does not inherit from <code>AppTextView</code> or any other <code>UITextInput</code> object are not supported inside FleksyApps.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK11AppTextView")
@interface AppTextView : UITextView
/// <code>AppTextView</code> overrides this property and returns a <code>clear</code> color when the text field is not the first responder.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
@property (nonatomic, readonly, strong) UIInputViewController * _Nullable inputViewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <UITextViewDelegate> _Nullable delegate;
/// The autocapitalization style for the <code>AppTextView</code>. Defaults to <code>UITextAutocapitalizationType.sentences</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocapitalizationType</code> to read the autocapitalization style instead.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the <code>AppTextView</code>. Defaults to <code>UITextAutocorrectionType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocorrectionType</code> to read the autocorrection style instead.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The appearance style of the keyboard for the <code>AppTextView</code>. Defaults to <code>UIKeyboardAppearance.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardAppearance</code> to read the appearance style of the keyboard instead.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// The keyboard type for the <code>AppTextView</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardType</code> to read the keyboard type instead.
@property (nonatomic) UIKeyboardType keyboardType;
/// The type of the Return key for the <code>AppTextView</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualReturnKeyType</code> to read the type of the Return key instead.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The configuration state for the smart insertion and deletion of space characters for the <code>AppTextView</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualSmartInsertDeleteType</code> to read the configuration state for the smart insertion and deletion of space characters instead.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType;
@end



SWIFT_CLASS("_TtC17FleksyKeyboardSDK16AppsCarouselCell")
@interface AppsCarouselCell : UICollectionViewCell
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK16AppsCarouselView")
@interface AppsCarouselView : TapBarOverlayView
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)actionClose:(id _Nullable)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class NSIndexPath;

@interface AppsCarouselView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDelegate>
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface AppsCarouselView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC17FleksyKeyboardSDK29DeleteEventPayloadObjcWrapper")
@interface DeleteEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithWord:(NSString * _Nonnull)word deleteCharacter:(NSString * _Nonnull)deleteCharacter typeDelete:(NSInteger)typeDelete timestamp:(int64_t)timestamp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNotification;

/// This class is responsible of creating instances of the classes that may or may not be a singleton.
/// Depending of whether we are in the keyboard extension or in an app (for the in-app keyboard), this class
/// returns certain instances for the objects.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK17DependencyManager")
@interface DependencyManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DependencyManager * _Nonnull shared;)
+ (DependencyManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This property contains the current <code>UIInputViewController</code> only when called from the keyboard extension. Returns <code>nil</code> and the setter is ignored if not called from the extension.
/// important:
/// Set this property as soon as possible.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIInputViewController * _Nullable extensionInputViewController;)
+ (UIInputViewController * _Nullable)extensionInputViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)setExtensionInputViewController:(UIInputViewController * _Nullable)newValue;
- (void)changeCoreEnvironmentToStaging:(NSNotification * _Nonnull)notification;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK9EmojiCell")
@interface EmojiCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


/// Object to configure some of the typing settings from Objective-C.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>EmojiConfiguration</code> struct.
SWIFT_CLASS_NAMED("EmojiConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate EmojiConfiguration initialization to Swift")
@interface EmojiConfiguration : NSObject <NSCopying>
- (nonnull instancetype)initWithSkinTone:(enumEmojiSkinTone)skinTone OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FleksyTheme;
@class UIButton;
@class UILongPressGestureRecognizer;
@class NSTimer;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK19EmojiViewController")
@interface EmojiViewController : FleksyPullDownViewController <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (void)pullDownGestureOnGoing;
- (void)pullDownGestureEnded;
- (void)onButtonSelected:(UIButton * _Nonnull)sender;
- (void)onButtonKeyboardHideWithSender:(UIButton * _Nonnull)sender forEvent:(UIEvent * _Nonnull)event;
- (void)onButtonDelete:(UIButton * _Nonnull)sender;
- (void)deleteButtonHeld:(UILongPressGestureRecognizer * _Nonnull)recognizer;
- (void)sendDelete:(id _Nullable)sender;
- (void)finishManualSelection:(NSTimer * _Nonnull)timer;
- (null_unspecified instancetype)initWithPullDownGestureEnabled:(BOOL)allowPullDownGesture SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface EmojiViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@class UICollectionViewLayout;
@class UIScrollView;

@interface EmojiViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDelegateFlowLayout>
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


/// This container view exists in order to avoid client’s view constraint conflicting with the mainContainer’s contraints.
/// In particular, the views of Fleksy apps are always wrapped inside an <code>ExternalViewSafeContainer</code>.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK25ExternalViewSafeContainer")
@interface ExternalViewSafeContainer : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setNeedsLayout;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol UIViewControllerTransitionCoordinator;

/// View at the root of our view hierarchy. Manages the height of the overall view.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK11FKInputView")
@interface FKInputView : UIInputView <UIInputViewAudioFeedback>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame inputViewStyle:(UIInputViewStyle)inputViewStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)willTransitionTo:(CGSize)size with:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)orientationChangeDidBeginWithTransitionSize:(CGSize)size SWIFT_DEPRECATED_MSG("Instead of calling 'orientationChangeDidBegin(transitionSize:)` and `orientationChangeDidEnd(coordinator:)`, just call `willTransition(to: with:)");
- (void)orientationChangeDidEndWith:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator SWIFT_DEPRECATED_MSG("Instead of calling 'orientationChangeDidBegin(transitionSize:)` and `orientationChangeDidEnd(coordinator:)`, just call `willTransition(to: with:)");
- (void)didMoveToSuperview;
- (void)refreshKeyboardHeight;
/// To set the height of the custom frame view of the keyboard
- (void)updateCustomHeight:(CGFloat)height;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end

@class UIViewController;

@interface FKInputView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyViewControllerPresenter>
- (void)pullDownGestureWithOffset:(CGFloat)offset view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
- (void)pullDownGestureEndedWithOffset:(CGFloat)offset velocity:(CGFloat)verticalVelocity view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
@end

@class UITraitCollection;

/// This class only exists to abstract all the functionality from the public <code>FKInputView</code>.
/// Because for FleksyApps, we need to <code>import FleksyAppsCore</code>, if <code>FKInputViewContent</code> didn’t exist,
/// using <code>FKInputView</code> from ObjC code seems not to be allowed
/// (e.g. from <code>FKInterfaceInputViewController.m</code> or from <code>FKKeyboardViewController.m</code>),
/// raising a compile-time error only when archiving the framework (not when building from Xcode).
/// The error is of the type:
/// \code
/// Undefined symbols for architecture arm64
/// Symbol: _OBJC_CLASS_$__TtC17FleksyKeyboardSDK11FKInputView
/// Referenced from: objc-class-ref in FKKeyboardViewController-7c67d071c60e77b93049361e64c7b02c.o
///
/// \endcodeTo avoid the error, we created <code>FKInputViewContent</code> to avoid <code>import FleksyAppsCore</code> in <code>FKInputView</code>. <code>FKInputView</code> is basically a ObjC wrapper around the public functionality of <code>FKInputViewContent</code>. This way, we did not break API compatiblity with previous versions of the SDK.
/// TODO: Remove wrapper when <code>FKInputView</code> can only be called from Swift (remember: for that we will need to remove the possibility of integrating the Keyboard SDK in Objective-C, since at that moment, Swift’s <code>FKKeyboardViewController</code> won’t be “subclassable” in ObjC. See FKKeyboardViewController.h
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18FKInputViewContent")
@interface FKInputViewContent : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic) CGRect bounds;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end



@interface FKInputViewContent (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyViewControllerPresenter>
- (void)pullDownGestureWithOffset:(CGFloat)offset view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
- (void)pullDownGestureEndedWithOffset:(CGFloat)offset velocity:(CGFloat)verticalVelocity view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
@end


/// This is a legacy class to enable donwloading and removing languages. Please, use <code>LanguagesHelper</code> instead.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK17FKInterfaceHelper")
@interface FKInterfaceHelper : NSObject
/// Downloads the given language.
/// This method downloads the list of available languages initially, in case this list has not been downloaded yet.
/// \param language  A string with the value of the language [language ISO 639-1]-[Country ISO 3166-alpha2].
///
/// \param progress A progress-reporting block. 
///
/// \param completion A block that executes when the language finishes downloading. A <code>nil</code> error means that the language downloaded successfully.
///
- (void)downloadLanguage:(NSString * _Nonnull)language progress:(void (^ _Nullable)(float))progress completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Remove the language Installed.
/// \param language The language to remove.
///
- (void)removeLanguage:(NSString * _Nonnull)language;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol FKInterfaceInputViewControllerDelegate;
@class KeyboardConfiguration;
@protocol FKDataCollection;
@class UIImage;
@class UIFont;
@protocol FKInterfaceDelegate;
@class CaptureConfiguration;
@class KeyboardDynamicConfiguration;
@class NSNumber;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK30FKInterfaceInputViewController")
@interface FKInterfaceInputViewController : NSObject <FKInterfaceProtocol>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView view:(UIView * _Nonnull)view textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController configuration:(KeyboardConfiguration * _Nonnull)configuration SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController output:(id <FKDataCollection> _Nullable)output configuration:(KeyboardConfiguration * _Nonnull)configuration appIcon:(UIImage * _Nullable)appIcon SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController output:(id <FKDataCollection> _Nullable)output configuration:(KeyboardConfiguration * _Nullable)configuration SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
@property (nonatomic, readonly, strong) UIFont * _Nullable keypadFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable lowercaseKeysFont;
- (void)viewWillAppear;
- (void)viewDidAppear;
- (void)viewWillDisappear;
- (void)viewDidDisappear;
- (void)didMoveToParent:(UIViewController * _Nullable)parent;
- (void)traitCollectionDidChangeWithPrevious:(UITraitCollection * _Nullable)previousTraitCollection new:(UITraitCollection * _Nonnull)newTraitCollection;
- (void)didReceiveMemoryWarning;
- (void)settingsChanged:(NSNotification * _Nonnull)notification;
- (void)leadingTopBarButtonPressed;
- (void)setInterfaceDelegate:(id <FKInterfaceDelegate> _Nonnull)interfaceDelegate;
- (void)insertText:(NSString * _Nonnull)text;
- (void)replaceText:(NSString * _Nonnull)text inRange:(NSRange)range;
- (void)replaceAllTextWith:(NSString * _Nonnull)text;
- (void)deleteBackward;
- (void)deleteBackwardWord;
- (void)insertWordPrediction:(NSString * _Nonnull)prediction withType:(WordPredictionType)type;
- (void)updateFlaggedWordsFile:(NSString * _Nonnull)filePath forLanguage:(NSString * _Nonnull)language;
- (void)enableCollectionActions:(BOOL)value collectionText:(BOOL)text;
- (void)loadCollectionActions:(CaptureConfiguration * _Nonnull)capture;
- (void)enableEncryptionWithKey:(NSString * _Nonnull)key;
- (void)subscribeEventBus:(NSArray<NSString *> * _Nonnull)arrayEvents;
- (UIView * _Nullable)getPanelCustomTopbarView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)reloadTheme:(NSDictionary * _Nonnull)theme SWIFT_WARN_UNUSED_RESULT;
- (BOOL)changeLanguageTo:(NSString * _Nonnull)languageCode layout:(NSString * _Nonnull)layout SWIFT_WARN_UNUSED_RESULT;
- (void)updateKeyboardInsets:(UIEdgeInsets)insets;
- (void)addWordUserDictionary:(NSString * _Nonnull)word;
- (NSArray<NSString *> * _Nonnull)listWordUserDictionary SWIFT_WARN_UNUSED_RESULT;
- (void)removeWordUserDictionary:(NSString * _Nonnull)word;
- (void)removeAllWordsUserDictionary;
- (void)deleteAutolearnDictionary;
- (void)reloadSettings;
- (void)reloadDynamicConfiguration:(KeyboardDynamicConfiguration * _Nonnull)configuration;
- (void)addCustomCollectedData:(NSDictionary * _Nonnull)dict;
- (void)flushCollectedData;
- (void)debugFlushRestartTypingSession;
- (void)debugSendPoint:(CGPoint)point endPoint:(CGPoint)endPoint diff:(NSTimeInterval)time;
- (void)debugSendPrediction:(CGPoint)point endPoint:(CGPoint)endPoint diff:(NSTimeInterval)time;
@property (nonatomic, readonly) NSInteger activationStatus;
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull licenseCapabilities;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyThemeableUI>
@end



@class UIGestureRecognizer;

@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
- (void)textWillChange:(id <UITextInput> _Nullable)textInput;
- (void)textDidChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionWillChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionDidChange:(id <UITextInput> _Nullable)textInput;
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyCursorControlDelegate>
@property (nonatomic, readonly) CGFloat keyboardContainerHeight;
@property (nonatomic) BOOL isShowingCursorControl;
@end




@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
- (void)pullDownGestureWithOffset:(CGFloat)offset view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
- (void)pullDownGestureEndedWithOffset:(CGFloat)offset velocity:(CGFloat)verticalVelocity view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, readonly, strong) UIFont * _Nullable extensionKeysFont;
@end



@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, readonly) BOOL isJapanese;
@property (nonatomic, readonly) BOOL isFlickKeyboard;
@end

/// Represents the license activation status of the SDK.
typedef SWIFT_ENUM(NSInteger, FKKeyboardActivationStatus, open) {
/// Invalid license. This happens due to having received an invalid license.
/// The capabilities of the SDK might be limited.
  FKKeyboardActivationStatusInvalid = 0,
/// License valid. All SDK functionality enabled according to license capabilities.
  FKKeyboardActivationStatusValid = 1,
};

/// Represents the license capabilities of the SDK.
typedef SWIFT_ENUM(NSInteger, FKKeyboardLicenseCapability, open) {
/// Health capability.
  FKKeyboardLicenseCapabilityHealth = 0,
/// Themes capability.
  FKKeyboardLicenseCapabilityThemes = 1,
/// CoreSDK capability.
  FKKeyboardLicenseCapabilityCoreSDK = 2,
/// Monitor stress capability.
  FKKeyboardLicenseCapabilityMonitorStress = 3,
  FKKeyboardLicenseCapabilityFleksyAppAdsTiles = 4,
  FKKeyboardLicenseCapabilityStoreData = 5,
};

@class KeyboardProperties;

SWIFT_CLASS_NAMED("FKKeyboardViewController")
@interface FKKeyboardViewControllerSwift : UIInputViewController <FKInterfaceInputViewControllerDelegate>
/// Initialized after <code>viewDidLoad</code> is called.
@property (nonatomic, readonly, strong) id <FKInterfaceProtocol> _Null_unspecified interface;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)didReceiveMemoryWarning;
- (void)textWillChange:(id <UITextInput> _Nullable)textInput;
- (void)textDidChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionDidChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionWillChange:(id <UITextInput> _Nullable)textInput;
/// The image to display on the left button of the top bar of the keyboard. Override this variable to customize this icon or to return <code>nil</code> if you want to to remove the icon and the <code>triggerOpenApp()</code> action it triggers.
/// The <code>KeyboardTheme</code>’s <code>keyLetters</code> color will be used as the tint color of the image, which only applies if the image is rendered as a template (see <a href="https://developer.apple.com/documentation/uikit/uiimage/1624153-withrenderingmode">Apple’s documentation</a>)
/// To optimize memory usage of the app extension, try to keep the image size as small as possible.
/// important:
/// This property is ignored if you override <code>leadingTopBarView</code>.
@property (nonatomic, readonly, strong) UIImage * _Nullable appIcon;
/// The leading view next to predictions in the top bar. Override this variable to customize this view.
/// <ul>
///   <li>
///     The default implementation returns a <code>UIButton</code> that shows the <code>appIcon</code> image. If you override the <code>appIcon</code> property and return <code>nil</code>, then nothing will be shown.
///   </li>
///   <li>
///     If you override this variable and return <code>nil</code> then nothing will be shown.
///   </li>
///   <li>
///     The width of the view is limited by the total width of the top bar. You can choose your desired width for this view using autolayout, but it will never be greater than the maximum allowed width. If the view’s width is smaller than the maximum allowed width, then the SDK will respect it. Lay out your custom view considering this.
///   </li>
///   <li>
///     The height of the view is limited by the height of the top bar. If the view’s height is smaller than the top height, it will appear centered vertically in the top bar. It is recommended not to constraint the view’s height to let it adapt to the top bar’s height.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIView * _Nullable leadingTopBarView;
/// The trailing view next to predictions in the top bar. Override this variable to customize this view.
/// <ul>
///   <li>
///     The default implementation returns <code>nil</code>.
///   </li>
///   <li>
///     If this variable is <code>nil</code> then nothing will be shown on the trailing edge of the predictions.
///   </li>
///   <li>
///     The width of the view is limited by the total width of the top bar. You can choose your desired width for this view using autolayout, but it will never be greater than the maximum allowed width. If the view’s width is smaller than the maximum allowed width, then the SDK will respect it. Lay out your custom view considering this.
///   </li>
///   <li>
///     The height of the view is limited by the height of the top bar. If the view’s height is smaller than the top height, it will appear centered vertically in the top bar. It is recommended not to constraint the view’s height to let it adapt to the top bar’s height.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIView * _Nullable trailingTopBarView;
- (void)addKeyboardViewController:(UIViewController * _Nonnull)currentKeyboardVC;
- (void)addDisplayedViewController:(UIViewController <FleksyThemeableUI> * _Nonnull)displayVC;
- (void)addExtensionsViewController:(UIViewController * _Nonnull)extensionsVC;
- (void)dismissKeyboardButton;
- (void)changeKeyboardButton;
/// This method is called whenever the keyboard frame changes.
/// The keyboard frame can change, for example, when the user rotates the device or when there’s a layout change. Use <code>keyboardFrame</code> to get the latest frame of the keyboard container view.
/// Override this method if you need to react to keyboard size changes. For example, if your FleksyApp needs to adapt its height to the keyboard frame change. You can read <code>keyboardFrame</code>, <code>topBarHeight</code> and <code>bottomKeyboardOffset</code> to know the remaining avaliable vertical space for your FleksyApp in <code>frame</code> mode. Depending on whether your FleksyApp keeps or hides the top bar (<code>TopBarMode</code>), the available vertical space for you app can be calculated like this:
/// \code
/// // For hidden top bar:
/// let availableHeight = UIScreen.main.bounds.height - keyboardFrame.height - bottomKeyboardOffset
///
/// // For visible top bar:
/// let availableHeight = UIScreen.main.bounds.height - topBarHeight - keyboardFrame.height - bottomKeyboardOffset
///
/// \endcodeimportant:
/// always call <code>super</code>’s implementation at some point if you override this method.
- (void)onKeyboardFrameChanged;
- (void)eventBus:(NSString * _Nonnull)event payload:(NSDictionary * _Nullable)dictPayload;
- (void)sessionStarted:(NSString * _Nonnull)sessionId;
- (void)sessionEnded:(NSString * _Nonnull)sessionId;
- (void)dataCollection:(NSString * _Nonnull)data sessionId:(NSString * _Nonnull)sessionId;
- (void)dataCollection:(NSString * _Nonnull)data SWIFT_DEPRECATED_MSG("", "dataCollection:sessionId:");
- (void)dataCollectionFormatDict:(NSDictionary * _Nonnull)data sessionId:(NSString * _Nonnull)sessionId;
- (void)dataCollectionFormatDict:(NSDictionary * _Nonnull)data SWIFT_DEPRECATED_MSG("", "dataCollectionFormatDict:sessionId:");
- (void)dataCollectionStored:(NSString * _Nonnull)path sessionId:(NSString * _Nonnull)sessionId;
- (void)reportAnalytics:(NSDictionary * _Nonnull)data;
- (void)onLayoutChanges:(NSDictionary * _Nonnull)dictLayout;
- (void)updateKeyboardAppsTextDocumentProxy:(id <UITextDocumentProxy> _Nullable)documentProxy;
- (void)contextPropertiesChanged:(KeyboardProperties * _Nonnull)properties;
- (void)triggerOpenApp;
- (void)leadingTopBarButtonPressed:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





/// Class used to show custom buttons defined by integrators via a custom .bundle file.
/// These buttons are identified in the .bundle file as those with:
/// <ul>
///   <li>
///     The <code>"name"</code> key set to <code>"custom_label"</code>.
///   </li>
///   <li>
///     The <code>"type"</code> key set to <code>"action-button"</code>.
///     The value for the <code>"label"</code> key is used as the button label, unless the integrators
///     defines a custom <code>UIImage</code> for it.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18FleksyCustomButton")
@interface FleksyCustomButton : FleksyButton
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (void)layoutSubviews;
@property (nonatomic) BOOL isShowingCursorControl;
- (null_unspecified instancetype)initWithDisplayLabel:(NSString * _Nonnull)displayLabel theme:(FleksyTheme * _Nullable)theme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)styleClass keyboardStyle:(KeyboardStyle)keyboardStyle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for buttons that change how they are displayed depending on the keyboard interface mode they are used in.
/// For example, the backspace (delete) button is displayed with the backspace icon in iPhone keyboards. In the full-sized iPad keyboard, in English it shows the “delete” word instead.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK19FleksyDynamicButton")
@interface FleksyDynamicButton : FleksyButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
@property (nonatomic) ButtonType buttonType;
@property (nonatomic) BOOL isShowingCursorControl;
- (void)changeType:(ButtonType)type;
- (void)setTitleColors;
- (UIColor * _Null_unspecified)buttonBackgroundColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Null_unspecified)pressedButtonBackgroundColor SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithDisplayLabel:(NSString * _Nonnull)displayLabel theme:(FleksyTheme * _Nullable)theme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)styleClass keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK19FleksyEngineManager")
@interface FleksyEngineManager : NSObject
/// Composing region of the engine. This is what is used to figure out what to replace when the engine outputs text.
@property (nonatomic, readonly) NSRange composingRegion;
/// Moves the cursor position by offset composed character sequences.
/// A positive <code>offset</code> moves the cursor to the right. A negative <code>offset</code> moves the cursor to the left.
/// Causes <code>textDidChange:</code> to be called.
/// \param offset The offset to move the cursor, in composed character sequences.
///
- (void)adjustCursorPositionByOffset:(NSInteger)offset;
- (void)settingsChanged:(NSNotification * _Nonnull)notification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface FleksyEngineManager (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyKeyboardDisplayStateInfoProvider>
@property (nonatomic, readonly, copy) NSString * _Nonnull magicButtonIcon;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified enterButtonIcon;
@end


@class FleksyExternalEditorState;
@class KeyStrokeEventPayloadCppWrapper;
@class DeleteEventPayloadCppWrapper;
@class KeyPlaneEventPayloadCppWrapper;
@class WordEventPayloadCppWrapper;
@class SwipeEventPayloadCppWrapper;
@class SessionUpdateEventPayloadCppWrapper;
@class StressUpdateEventPayloadCppWrapper;

@interface FleksyEngineManager (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyAPIManagerDelegate>
- (void)setSelection:(NSRange)range;
- (FleksyExternalEditorState * _Nonnull)keyboardState SWIFT_WARN_UNUSED_RESULT;
/// This method hooks the send composing text back to originating view (textView or textField according to the inputView property)
- (BOOL)replaceComposingText:(NSString * _Null_unspecified)someText SWIFT_WARN_UNUSED_RESULT;
- (void)storeComposingRangeStart:(int32_t)start end:(int32_t)end;
- (void)messageReceivedFromAPI:(MessageType)type message:(NSString * _Null_unspecified)message;
- (void)dictionaryModifiedFromAPIWithEvent:(DictionaryChangeEvent)event word:(NSString * _Null_unspecified)word;
- (void)selectedSuggestionsChangedFromAPI:(int32_t)selectedIndex;
- (void)sendSpeakFromAPI:(NSString * _Null_unspecified)text;
- (void)requestLayoutChangeFromEngine:(KeyboardID)keyboardID;
- (void)typeChanged:(ButtonType)type forButtonsOfType:(ButtonType)oldType;
- (void)respondToAPIError:(FSAPIManagerErrorCode)error;
- (void)highlightsReceivedFromEngine:(NSString * _Null_unspecified)stringJson;
- (void)nextWordPredictionsReceivedFromEngine:(NSArray<NSString *> * _Nullable)predictions predictionTypes:(NSArray<NSNumber *> * _Nullable)predictionTypes;
- (void)japanesePredictionsReceivedFromEngine:(NSArray<NSString *> * _Nullable)predictions;
- (void)onDelete;
- (void)onReportCorrectionCounts:(NSString * _Null_unspecified)langCode none:(NSUInteger)none missSpace:(NSUInteger)missSpace missTypedSpace:(NSUInteger)cvbSpace eliminated:(NSUInteger)elim transposition:(NSUInteger)trans missing:(NSUInteger)missing controller:(NSUInteger)tc;
- (BOOL)buttonPressed:(ButtonType)button SWIFT_WARN_UNUSED_RESULT;
- (void)onDataCaptureKeyStrokeEventWithPayload:(KeyStrokeEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureDeleteEventWithPayload:(DeleteEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureKeyPlaneEventWithPayload:(KeyPlaneEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureWordEventWithPayload:(WordEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureSwipeEventWithPayload:(SwipeEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureSessionUpdateEventWithPayload:(SessionUpdateEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureStressUpdateEventWithPayload:(StressUpdateEventPayloadCppWrapper * _Null_unspecified)payload;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK17FleksyEnterButton")
@interface FleksyEnterButton : FleksyEmojiHintButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (null_unspecified instancetype)initWithIcon:(NSString * _Null_unspecified)iconChar cornerIcon:(NSString * _Null_unspecified)cornerIconChar theme:(FleksyTheme * _Null_unspecified)aTheme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)aStyleClass keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_UNAVAILABLE;
- (null_unspecified instancetype)initWithDisplayLabel:(NSString * _Nonnull)displayLabel theme:(FleksyTheme * _Nullable)theme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)styleClass keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class FleksyLayoutElement;

/// Keyboard key with support of flick down gesture to get alternative character. Exclusive for full-sized iPad keyboard.
/// This class is only supported if the <code>FleksyTheme</code>’s <code>isLookFeelSystem</code> is <code>true</code>
SWIFT_CLASS("_TtC17FleksyKeyboardSDK14FleksyFlickKey")
@interface FleksyFlickKey : UIView <FleksyKeyboardKey>
- (nonnull instancetype)initWithFrame:(CGRect)frame uniqueID:(int32_t)uniqueID buttonType:(ButtonType)buttonType letter:(NSString * _Nonnull)letter altCharacter:(NSString * _Nullable)altCharacter font:(UIFont * _Nonnull)font lowercaseFont:(UIFont * _Nonnull)lowercaseFont theme:(FleksyTheme * _Nullable)theme keyboardStyle:(KeyboardStyle)keyboardStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull letter;
@property (nonatomic, copy) NSString * _Nullable altCharacter;
@property (nonatomic, strong) UIFont * _Nonnull letterFont;
@property (nonatomic, strong) UIFont * _Nonnull lowercaseLetterFont;
@property (nonatomic) int32_t uniqueID;
@property (nonatomic) ButtonType buttonType;
- (void)setDimmed:(BOOL)dimm animated:(BOOL)animated;
- (void)setFrameApplyingMarginsToFrame:(CGRect)frame;
@property (nonatomic) BOOL isShowingCursorControl;
- (BOOL)isAssociatedToElement:(FleksyLayoutElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (void)highlight;
- (void)pop;
- (void)highlightForTemporaryKeypad;
- (void)restore;
- (void)restoreWithAnimationDuration:(NSTimeInterval)duration;
- (void)dragPopWithShiftY:(CGFloat)shiftY duration:(NSTimeInterval)duration isSidePop:(BOOL)isSidePop;
- (void)containerSwiped:(FleksyTouchSwipeDirection)swipeDirection;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// View that manages keypad UI. It contains all the keys and buttons that make up the keypad.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK16FleksyKeyPadView")
@interface FleksyKeyPadView : UIView <FleksyThemeableUI, FleksyVibrantViewContainer>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
@property (nonatomic) BOOL isInAlphaAnimation;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) CGRect frame;
@property (nonatomic) CGRect bounds;
- (void)globeButtonTouchEvent:(FleksyButton * _Nonnull)button event:(UIEvent * _Nonnull)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK28FleksyKeyboardViewController")
@interface FleksyKeyboardViewController : UIViewController <FleksyEngineButtonHandler, FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)backSpaceHoldContinued;
- (BOOL)buttonPressed:(ButtonType)buttonType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isFlickKeyboard;
@property (nonatomic, readonly) BOOL isJapanese;
@property (nonatomic, readonly, strong) UIFont * _Nullable keypadFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable lowercaseKeysFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable extensionKeysFont;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




@interface FleksyKeyboardViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, readonly, strong) UIView * _Nullable inputView;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified magicButtonIcon;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified enterButtonIcon;
@end





@interface FleksyUtility (SWIFT_EXTENSION(FleksyKeyboardSDK))
/// Method to check whether the code is running in an App Extension.
///
/// returns:
/// <code>true</code> only when the code is running in an App Extension. In particular, returns <code>true</code> when the code is running in a keyboard extension.
+ (BOOL)isExtension SWIFT_WARN_UNUSED_RESULT;
@end



@interface FleksyUtility (SWIFT_EXTENSION(FleksyKeyboardSDK))
/// Returns a rect with the original size of the keyboard (see <code>StyleConfiguration/KeyboardSize-swift.enum/original</code>).
+ (CGRect)getDefaultFleksyKeyboardSizeWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection SWIFT_WARN_UNUSED_RESULT;
+ (CGRect)applyingKeyOrButtonInsetsToRect:(CGRect)rect isHoverHighlight:(BOOL)isHoverHighlight flickKeyboard:(BOOL)flickKeyboard buttonType:(ButtonType)buttonType keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)getPaddingOffSet SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK19FlickPredictionCell")
@interface FlickPredictionCell : UICollectionViewCell
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK22FlickPredictionsLayout")
@interface FlickPredictionsLayout : UICollectionViewFlowLayout
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath * _Nonnull)itemIndexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK20FlickPredictionsView")
@interface FlickPredictionsView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface FlickPredictionsView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDelegateFlowLayout>
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface FlickPredictionsView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK24HighlightsViewController")
@interface HighlightsViewController : UIViewController <FleksyThemeableUI>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




SWIFT_CLASS("_TtC17FleksyKeyboardSDK33JapanesePredictionsViewController")
@interface JapanesePredictionsViewController : UIViewController <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)actionExpandCollapseButtonPressed:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// Container for key pad long press popups. The actual keys are added to this view from the caller.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK21KeyLongPressPopupView")
@interface KeyLongPressPopupView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class KeyPlaneKeyPayloadObjcWrapper;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK31KeyPlaneEventPayloadObjcWrapper")
@interface KeyPlaneEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithKeyPlaneId:(NSInteger)keyPlaneId keys:(NSArray<KeyPlaneKeyPayloadObjcWrapper *> * _Nonnull)keys OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK29KeyPlaneKeyPayloadObjcWrapper")
@interface KeyPlaneKeyPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithCenter:(CGPoint)center rectangle:(CGRect)rectangle label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class with a set of static methods used to draw the key pops.
SWIFT_CLASS_NAMED("KeyPopupAppearance")
@interface KeyPopupAppearance : NSObject
/// Creates the popup for a Japanese Flick key tap.
+ (UIView * _Nullable)viewForFlickPopWithKeyFrame:(CGRect)keyFrame direction:(FlickDirection)direction letter:(NSString * _Nonnull)letter keyboardFrame:(CGRect)keyboardFrame font:(UIFont * _Nonnull)font theme:(FleksyTheme * _Nonnull)theme SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The view used for the standard key popups.
/// When a key tap happens, the keyboard shows this view, which is masked with
/// the normal key popup shape, visually originating from the key that was tapped.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK13KeyPopupLabel")
@interface KeyPopupLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label keyboardFrame:(CGRect)keyboardFrame keyFrame:(CGRect)keyFrame font:(UIFont * _Nonnull)font theme:(FleksyTheme * _Nonnull)theme OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)drawTextInRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK32KeyStrokeEventPayloadObjcWrapper")
@interface KeyStrokeEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithPressTime:(int64_t)pressTime releaseTime:(int64_t)releaseTime keyType:(NSInteger)keyType keyText:(NSString * _Nonnull)keyText keyArea:(NSUInteger)keyArea keyCode:(NSUInteger)keyCode keyPressBegin:(CGPoint)keyPressBegin keyPressEnd:(CGPoint)keyPressEnd keyCenter:(CGPoint)keyCenter keyRectangle:(CGRect)keyRectangle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AppearanceConfiguration;
@class SpecialKeysConfiguration;
@class PanelConfiguration;
@class DebugConfiguration;

/// This is the class that allows you to fine-tune the whole keyboard offered by the FleksySDK. Change the languages, typing experience and much more.
/// You create a <code>KeyboardConfiguration-swift.class</code> object to return it in your override of <code>FKKeyboardViewController-2sctr</code>’s <code>FKKeyboardViewController-2sctr/createConfiguration()-4aaah</code> method.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK21KeyboardConfiguration")
@interface KeyboardConfiguration : NSObject <NSCopying>
@property (nonatomic) BOOL customTopBar;
@property (nonatomic) float heightCustomTopBar;
@property (nonatomic) BOOL needsInputMethodSwitch SWIFT_DEPRECATED_MSG("This property is ignored by the SDK and does not have any effect");
@property (nonatomic, strong) AppearanceConfiguration * _Nonnull appearance SWIFT_DEPRECATED_MSG("All AppearanceConfiguration APIs are deprecated and ignored");
@property (nonatomic, strong) SpecialKeysConfiguration * _Nullable specialKeys SWIFT_DEPRECATED_MSG("The SpecialKeysConfiguration API is deprecated and will be removed in a future release. You can use TypingConfiguration's magicButtonAction and magicButtonLongPressActions parameters to fully customize the magic button");
@property (nonatomic, strong) PanelConfiguration * _Nonnull panel SWIFT_DEPRECATED_MSG("PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
@property (nonatomic, strong) DebugConfiguration * _Nonnull debugConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use an initialization that receives a `LicenseConfiguration` object");
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end





@class StyleConfiguration;
@class TypingConfiguration;
@class LicenseConfiguration;

@interface KeyboardConfiguration (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, strong) CaptureConfiguration * _Nonnull capture SWIFT_DEPRECATED_MSG("Use the `dataCapture` property. Returns a dummy `CaptureConfiguration` when `dataCapture` is different from `.sessionBased`");
@property (nonatomic, strong) StyleConfiguration * _Nullable style SWIFT_DEPRECATED_MSG("Use KeyboardConfiguration initializer in Swift with the style parameter");
@property (nonatomic, strong) EmojiConfiguration * _Nullable emojiConfig SWIFT_DEPRECATED_MSG("Use KeyboardConfiguration initializer in Swift with the emoji parameter");
/// ObjC accessor for <code>typing.spacebarMovesCursor</code>
@property (nonatomic, readonly) BOOL typingSpacebarMovesCursor;
- (nonnull instancetype)initWithPanel:(PanelConfiguration * _Nullable)panel capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance typing:(TypingConfiguration * _Nullable)typing specialKeys:(SpecialKeysConfiguration * _Nullable)specialKeys license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
- (nonnull instancetype)initWithPanel:(PanelConfiguration * _Nullable)panel capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style typing:(TypingConfiguration * _Nullable)typing specialKeys:(SpecialKeysConfiguration * _Nullable)specialKeys license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that uses the `dataCapture` parameter. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
/// Creates the <code>KeyboardConfiguration</code> instance.
/// \param heightCustom The desired height, in points, of the top bar when <code>customView</code> is <code>true</code>. In this case, the minimum height of the top bar will be of 44 pts.
///
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored");
/// Creates the <code>KeyboardConfiguration</code> instance.
/// \param heightCustom The desired height, in points, of the top bar when <code>customView</code> is <code>true</code>. In this case, the minimum height of the top bar will be of 44 pts.
///
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `customView` and `heightCustom` parameters. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration");
@end


/// Object that wraps the SDK license key and secret.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>LicenseConfiguration</code> struct.
SWIFT_CLASS_NAMED("LicenseConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate LicenseConfiguration initialization to Swift")
@interface LicenseConfiguration : NSObject <NSCopying>
/// The license key for the SDK.
@property (nonatomic, copy) NSString * _Nonnull licenseKey;
/// The license secret for the SDK.
@property (nonatomic, copy) NSString * _Nonnull licenseSecret;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLicenseKey:(NSString * _Nonnull)licenseKey licenseSecret:(NSString * _Nonnull)licenseSecret OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC17FleksyKeyboardSDK10MaskedView")
@interface MaskedView : UIView
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// View used as vertical separator between groups (<code>PredictionsItemGroup</code>s) in the predictions bar. Also used as a vertical separator in other places inside the top bar (see <code>AppsCarouselView</code>).
SWIFT_CLASS("_TtC17FleksyKeyboardSDK24PredictionGroupSeparator")
@interface PredictionGroupSeparator : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// View that draws prediction items. It is modelled by the <code>PredictionsItemType</code> enum. It shows:
/// <ul>
///   <li>
///     A single <code>TextPredictionView</code> for <code>PredictionsItemType.text</code>.
///   </li>
///   <li>
///     Multiple stacked <code>PredictionItemView</code>s for <code>PredictionsItemType.group(items:)</code> (one <code>PredictionItemView</code> per <code>PredictionsItemType</code> in the <code>items</code> array).
///   </li>
///   <li>
///     No views for <code>PredictionsItemType.text</code>.
///   </li>
/// </ul>
/// With this recursive approach we can easily get to any combinations of predictions (e.g. [ “Monkey” | <em>empty</em> | 🙈 | 🙉 | 🙊 ])
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18PredictionItemView")
@interface PredictionItemView : UIView <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The view that contains all text and emoji predictions/suggestions.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK15PredictionsView")
@interface PredictionsView : UIView <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK36SessionUpdateEventPayloadObjcWrapper")
@interface SessionUpdateEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithTimeZone:(double)timeZone layout:(NSString * _Nonnull)layout textField:(NSInteger)textField language:(NSString * _Nonnull)language languageVersion:(NSString * _Nonnull)languageVersion appContext:(NSString * _Nonnull)appContext schemaVersion:(NSString * _Nonnull)schemaVersion keyboardAreaWidth:(NSInteger)keyboardAreaWidth keyboardAreaHeight:(NSInteger)keyboardAreaHeight screenWidthMm:(double)screenWidthMm screenHeightMm:(double)screenHeightMm screenWidthPx:(NSInteger)screenWidthPx screenHeightPx:(NSInteger)screenHeightPx startTimestamp:(int64_t)startTimestamp endTimestamp:(int64_t)endTimestamp sessionText:(NSString * _Nonnull)sessionText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK35StressUpdateEventPayloadObjcWrapper")
@interface StressUpdateEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithStress:(NSInteger)stress regime:(NSInteger)regime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Object to configure some of the style settings from Objective-C.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>StyleConfiguration</code> class.
SWIFT_CLASS_NAMED("StyleConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate StyleConfiguration initialization to Swift")
@interface StyleConfiguration : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTheme:(NSDictionary<NSString *, id> * _Nonnull)theme withDarkTheme:(NSDictionary<NSString *, id> * _Nonnull)darkTheme OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull dictForceTheme;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull dictForceDarkTheme;
@property (nonatomic, copy) NSString * _Nullable spacebarLogo;
@property (nonatomic) BOOL fitSpacebarLogo;
@property (nonatomic) enumSpacebarStyle spacebarStyle;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC17FleksyKeyboardSDK32SwipeCandidatePayloadObjcWrapper")
@interface SwipeCandidatePayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithCandidate:(NSString * _Nonnull)candidate shapeProb:(double)shapeProb finalProb:(double)finalProb OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SwipeFeaturePayloadObjcWrapper;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK28SwipeEventPayloadObjcWrapper")
@interface SwipeEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithContext:(NSString * _Nonnull)context features:(NSArray<SwipeFeaturePayloadObjcWrapper *> * _Nonnull)features word:(NSString * _Nonnull)word selectedSuggestion:(NSString * _Nonnull)selectedSuggestion layout:(NSString * _Nonnull)layout timestamp:(uint64_t)timestamp candidates:(NSArray<SwipeCandidatePayloadObjcWrapper *> * _Nonnull)candidates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK30SwipeFeaturePayloadObjcWrapper")
@interface SwipeFeaturePayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithPoint:(CGPoint)point timestamp:(uint64_t)timestamp label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The popup view for a long press key tap, masked with the long press key popup shape.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK10TempKeypad")
@interface TempKeypad : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface TempKeypad (SWIFT_EXTENSION(FleksyKeyboardSDK))
@end


/// The basic view to show a single text prediction. Only to be used by <code>PredictionItemView</code>.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18TextPredictionView")
@interface TextPredictionView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK15ThemeableButton")
@interface ThemeableButton : UIButton <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class manages the SDK view controllers that appear in the top bar. Namely, <code>HighlightsViewController</code>, <code>JapanesePredictionsViewController</code> and <code>FKEmptyViewController</code>.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK20TopBarViewController")
@interface TopBarViewController : UIViewController <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Object to configure some of the typing settings from Objective-C.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>TypingConfiguration</code> struct.
SWIFT_CLASS_NAMED("TypingConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate TypingConfiguration initialization to Swift")
@interface TypingConfiguration : NSObject <NSCopying>
/// A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard. Defaults to <code>true</code> .
@property (nonatomic, readonly) BOOL keitaiEnabled;
/// The amount of delay seconds for the Keitai rotations. Only considered when <code>keitaiEnabled</code> is <code>true</code>. Defaults to <code>FLEKSY_DEFAULT_KEITAI_DELAY</code>.
@property (nonatomic, readonly) NSTimeInterval keitaiDelay;
/// A boolean indicating whether the spacebar can move the cursor on a long press.
@property (nonatomic, readonly) BOOL spacebarMovesCursor;
/// If this array is present, SDK uses this array to show up when we long press in the “punctuation” key, next to the enter key.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable arrayPunctuationSymbols;
/// Initializes the <code>TypingConfiguration</code> allowing to configure the Keitai mode and spacebar long-press behavior.
/// \param keitaiEnabled A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard.
///
/// \param keitaiDelay The amount of delay seconds for the Keitai rotations. Only considered when <code>keitaiEnabled</code> is <code>true</code>.
///
/// \param spacebarMovesCursor A boolean indicating whether the spacebar can move the cursor on a long press.
///
- (nonnull instancetype)initWithKeitaiEnabled:(BOOL)keitaiEnabled keitaiDelay:(NSTimeInterval)keitaiDelay spacebarMovesCursor:(BOOL)spacebarMovesCursor OBJC_DESIGNATED_INITIALIZER;
/// Initializes the <code>TypingConfiguration</code> with default settings.
- (nonnull instancetype)init;
/// Initializes the <code>TypingConfiguration</code> allowing to enable/disable the Keitai mode.
/// \param keitaiEnabled A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard.
///
- (nonnull instancetype)initWithKeitaiEnabled:(BOOL)keitaiEnabled;
/// Initializes the @c TypingConfiguration allowing to configure the Keitai mode.
/// \param keitaiEnabled A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard.
///
/// \param keitaiDelay The amount of delay seconds for the Keitai rotations. Only considered when <code>keitaiEnabled</code> is <code>true</code>.
///
- (nonnull instancetype)initWithKeitaiEnabled:(BOOL)keitaiEnabled keitaiDelay:(NSTimeInterval)keitaiDelay;
/// Initializes the <code>TypingConfiguration</code> allowing to enable/disable spacebar long-press behaviour.
/// \param spacebarMovesCursor A boolean indicating whether the spacebar can move the cursor on a long press.
///
- (nonnull instancetype)initWithSpacebarMovesCursor:(BOOL)spacebarMovesCursor;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end










SWIFT_CLASS("_TtC17FleksyKeyboardSDK26UITextFieldDelegateWrapper")
@interface UITextFieldDelegateWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIMenuElement;
@class UIMenu;
@protocol UIEditMenuInteractionAnimating;

@interface UITextFieldDelegateWrapper (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidChangeSelection:(UITextField * _Nonnull)textField;
- (UIMenu * _Nullable)textField:(UITextField * _Nonnull)textField editMenuForCharactersInRange:(NSRange)range suggestedActions:(NSArray<UIMenuElement *> * _Nonnull)suggestedActions SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textField:(UITextField * _Nonnull)textField willPresentEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textField:(UITextField * _Nonnull)textField willDismissEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK25UITextViewDelegateWrapper")
@interface UITextViewDelegateWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSTextAttachment;
@class NSURL;

@interface UITextViewDelegateWrapper (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
- (UIMenu * _Nullable)textView:(UITextView * _Nonnull)textView editMenuForTextInRange:(NSRange)range suggestedActions:(NSArray<UIMenuElement *> * _Nonnull)suggestedActions SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textView:(UITextView * _Nonnull)textView willDismissEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textView:(UITextView * _Nonnull)textView willPresentEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
@end


@interface UITraitCollection (SWIFT_EXTENSION(FleksyKeyboardSDK))
/// The style of keyboard defined by the trait collection.
- (KeyboardStyle)keyboardStyleForAvailableWidth:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC17FleksyKeyboardSDK27WordEventPayloadObjcWrapper")
@interface WordEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithOriginalWord:(NSString * _Nonnull)originalWord word:(NSString * _Nonnull)word timestamp:(int64_t)timestamp autocorrectionType:(NSInteger)autocorrectionType autocorrectionNumber:(int64_t)autocorrectionNumber isAutoCorrectedWord:(NSInteger)isAutoCorrectedWord isPredictedWord:(NSInteger)isPredictedWord isSwipeWord:(NSInteger)isSwipeWord uniP:(double)uniP OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
#ifndef FLEKSYKEYBOARDSDK_SWIFT_H
#define FLEKSYKEYBOARDSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
#endif

#import <FleksyKeyboardSDK/FleksyKeyboardSDK.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="FleksyKeyboardSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class UITextInputMode;
@class NSUUID;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK20AppTextDocumentProxy")
@interface AppTextDocumentProxy : NSObject <UITextDocumentProxy>
@property (nonatomic, readonly, copy) NSString * _Nullable documentContextBeforeInput;
@property (nonatomic, readonly, copy) NSString * _Nullable documentContextAfterInput;
@property (nonatomic, readonly, copy) NSString * _Nullable selectedText;
@property (nonatomic, readonly, strong) UITextInputMode * _Nullable documentInputMode;
@property (nonatomic, copy) NSUUID * _Nonnull documentIdentifier;
- (void)adjustTextPositionByCharacterOffset:(NSInteger)offset;
- (void)setMarkedText:(NSString * _Nonnull)markedText selectedRange:(NSRange)selectedRange;
- (void)unmarkText;
@property (nonatomic, readonly) BOOL hasText;
- (void)insertText:(NSString * _Nonnull)text;
- (void)deleteBackward;
/// Initialized to default values as per Apple’s documentation
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
@property (nonatomic) UIKeyboardType keyboardType;
@property (nonatomic) UIReturnKeyType returnKeyType;
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIColor;
@class UIInputViewController;
@class NSCoder;
@protocol UITextFieldDelegate;

/// This class allows FleksyApps to have text fields in their view hierarchy.
/// The user will be able to manually switch between the text input in the host app (that opened the keyboard) and the <code>AppTextField</code>s and <code>AppTextView</code>s inside FleksyApps by just tapping the text field/view they want the keyboard to focus on.
/// You can use <code>becomeFirstResponder()</code> and <code>resignFirstResponder()</code> on <code>AppTextField</code>s as you would normally do with any <code>UITextInput</code> to programmatically focus the keyboard on the <code>AppTextField</code> or remove the focus from it. When you <code>resignFirstResponder()</code> on <code>AppTextField</code> that is currently the first responder, the focus of the keyboard is moved back to the host app.
/// important:
/// <code>AppTextField</code> and <code>AppTextView</code> are the only supported ways to have text input inside FleksyApps. This means that using a <code>UITextField</code>, a <code>UITextField</code> subclass that does not inherit from <code>AppTextField</code>, a <code>UITextView</code>, a <code>UITextView</code> subclass that does not inherit from <code>AppTextView</code> or any other <code>UITextInput</code> object are not supported inside FleksyApps.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK12AppTextField")
@interface AppTextField : UITextField
/// <code>AppTextField</code> overrides this property and returns a <code>clear</code> color when the text field is not the first responder.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
@property (nonatomic, readonly, strong) UIInputViewController * _Nullable inputViewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (void)insertText:(NSString * _Nonnull)text;
@property (nonatomic, strong) id <UITextFieldDelegate> _Nullable delegate;
/// The autocapitalization style for the <code>AppTextField</code>. Defaults to <code>UITextAutocapitalizationType.sentences</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocapitalizationType</code> to read the autocapitalization style instead.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the <code>AppTextField</code>. Defaults to <code>UITextAutocorrectionType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocorrectionType</code> to read the autocorrection style instead.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The appearance style of the keyboard for the <code>AppTextField</code>. Defaults to <code>UIKeyboardAppearance.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardAppearance</code> to read the appearance style of the keyboard instead.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// The keyboard type for the <code>AppTextField</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardType</code> to read the keyboard type instead.
@property (nonatomic) UIKeyboardType keyboardType;
/// The type of the Return key for the <code>AppTextField</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualReturnKeyType</code> to read the type of the Return key instead.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The configuration state for the smart insertion and deletion of space characters for the <code>AppTextField</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualSmartInsertDeleteType</code> to read the configuration state for the smart insertion and deletion of space characters instead.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType;
@end



/// Abstract class for overlay views in top bar (apps carousel, bar with text field, …)
SWIFT_CLASS("_TtC17FleksyKeyboardSDK17TapBarOverlayView")
@interface TapBarOverlayView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// View for keyboard apps to have a search bar in the top bar.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK15AppTextFieldBar")
@interface AppTextFieldBar : TapBarOverlayView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)actionAppIcon:(id _Nullable)sender;
- (void)actionClose:(id _Nullable)sender;
- (void)actionTextChange:(AppTextField * _Nonnull)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end



@interface AppTextFieldBar (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@protocol UITextInput;
@class NSBundle;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK31AppTextFieldInputViewController")
@interface AppTextFieldInputViewController : UIInputViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)textDidChange:(id <UITextInput> _Nullable)textInput;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class NSTextContainer;
@protocol UITextViewDelegate;

/// This class allows FleksyApps to have text views in their view hierarchy.
/// The user will be able to manually switch between the text input in the host app (that opened the keyboard) and the <code>AppTextField</code>s and <code>AppTextView</code>s inside FleksyApps by just tapping the text field/view they want the keyboard to focus on.
/// You can use <code>becomeFirstResponder()</code> and <code>resignFirstResponder()</code> on <code>AppTextView</code>s as you would normally do with any <code>UITextInput</code> to programmatically focus the keyboard on the <code>AppTextView</code> or remove the focus from it. When you <code>resignFirstResponder()</code> on <code>AppTextView</code> that is currently the first responder, the focus of the keyboard is moved back to the host app.
/// important:
/// <code>AppTextField</code> and <code>AppTextView</code> are the only supported ways to have text input inside FleksyApps. This means that using a <code>UITextField</code>, a <code>UITextField</code> subclass that does not inherit from <code>AppTextField</code>, a <code>UITextView</code>, a <code>UITextView</code> subclass that does not inherit from <code>AppTextView</code> or any other <code>UITextInput</code> object are not supported inside FleksyApps.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK11AppTextView")
@interface AppTextView : UITextView
/// <code>AppTextView</code> overrides this property and returns a <code>clear</code> color when the text field is not the first responder.
@property (nonatomic, strong) UIColor * _Nullable tintColor;
@property (nonatomic, readonly, strong) UIInputViewController * _Nullable inputViewController;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (void)didMoveToSuperview;
- (void)didMoveToWindow;
- (BOOL)becomeFirstResponder SWIFT_WARN_UNUSED_RESULT;
- (BOOL)resignFirstResponder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) id <UITextViewDelegate> _Nullable delegate;
/// The autocapitalization style for the <code>AppTextView</code>. Defaults to <code>UITextAutocapitalizationType.sentences</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocapitalizationType</code> to read the autocapitalization style instead.
@property (nonatomic) UITextAutocapitalizationType autocapitalizationType;
/// The autocorrection style for the <code>AppTextView</code>. Defaults to <code>UITextAutocorrectionType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualAutocorrectionType</code> to read the autocorrection style instead.
@property (nonatomic) UITextAutocorrectionType autocorrectionType;
/// The appearance style of the keyboard for the <code>AppTextView</code>. Defaults to <code>UIKeyboardAppearance.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardAppearance</code> to read the appearance style of the keyboard instead.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// The keyboard type for the <code>AppTextView</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualKeyboardType</code> to read the keyboard type instead.
@property (nonatomic) UIKeyboardType keyboardType;
/// The type of the Return key for the <code>AppTextView</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualReturnKeyType</code> to read the type of the Return key instead.
@property (nonatomic) UIReturnKeyType returnKeyType;
/// The configuration state for the smart insertion and deletion of space characters for the <code>AppTextView</code>. Defaults to <code>UIKeyboardType.default</code>.
/// Set this property to any value for the Fleksy keyboard to enforce it.
/// important:
/// Do not relay on the getter of this property as it does not return the expected value. Use <code>actualSmartInsertDeleteType</code> to read the configuration state for the smart insertion and deletion of space characters instead.
@property (nonatomic) UITextSmartInsertDeleteType smartInsertDeleteType;
@end



SWIFT_CLASS("_TtC17FleksyKeyboardSDK16AppsCarouselCell")
@interface AppsCarouselCell : UICollectionViewCell
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK16AppsCarouselView")
@interface AppsCarouselView : TapBarOverlayView
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)actionClose:(id _Nullable)sender;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UICollectionView;
@class NSIndexPath;

@interface AppsCarouselView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDelegate>
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface AppsCarouselView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC17FleksyKeyboardSDK29DeleteEventPayloadObjcWrapper")
@interface DeleteEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithWord:(NSString * _Nonnull)word deleteCharacter:(NSString * _Nonnull)deleteCharacter typeDelete:(NSInteger)typeDelete timestamp:(int64_t)timestamp OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSNotification;

/// This class is responsible of creating instances of the classes that may or may not be a singleton.
/// Depending of whether we are in the keyboard extension or in an app (for the in-app keyboard), this class
/// returns certain instances for the objects.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK17DependencyManager")
@interface DependencyManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) DependencyManager * _Nonnull shared;)
+ (DependencyManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This property contains the current <code>UIInputViewController</code> only when called from the keyboard extension. Returns <code>nil</code> and the setter is ignored if not called from the extension.
/// important:
/// Set this property as soon as possible.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UIInputViewController * _Nullable extensionInputViewController;)
+ (UIInputViewController * _Nullable)extensionInputViewController SWIFT_WARN_UNUSED_RESULT;
+ (void)setExtensionInputViewController:(UIInputViewController * _Nullable)newValue;
- (void)changeCoreEnvironmentToStaging:(NSNotification * _Nonnull)notification;
@end

@class UITouch;
@class UIEvent;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK9EmojiCell")
@interface EmojiCell : UICollectionViewCell
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForReuse;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
@end


/// Object to configure some of the typing settings from Objective-C.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>EmojiConfiguration</code> struct.
SWIFT_CLASS_NAMED("EmojiConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate EmojiConfiguration initialization to Swift")
@interface EmojiConfiguration : NSObject <NSCopying>
- (nonnull instancetype)initWithSkinTone:(enumEmojiSkinTone)skinTone OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class FleksyTheme;
@class UIButton;
@class UILongPressGestureRecognizer;
@class NSTimer;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK19EmojiViewController")
@interface EmojiViewController : FleksyPullDownViewController <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (void)pullDownGestureOnGoing;
- (void)pullDownGestureEnded;
- (void)onButtonSelected:(UIButton * _Nonnull)sender;
- (void)onButtonKeyboardHideWithSender:(UIButton * _Nonnull)sender forEvent:(UIEvent * _Nonnull)event;
- (void)onButtonDelete:(UIButton * _Nonnull)sender;
- (void)deleteButtonHeld:(UILongPressGestureRecognizer * _Nonnull)recognizer;
- (void)sendDelete:(id _Nullable)sender;
- (void)finishManualSelection:(NSTimer * _Nonnull)timer;
- (null_unspecified instancetype)initWithPullDownGestureEnabled:(BOOL)allowPullDownGesture SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface EmojiViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDataSource>
- (NSInteger)numberOfSectionsInCollectionView:(UICollectionView * _Nonnull)collectionView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)collectionView:(UICollectionView * _Nonnull)collectionView shouldSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@class UICollectionViewLayout;
@class UIScrollView;

@interface EmojiViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDelegateFlowLayout>
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didEndDisplayingCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)collectionView:(UICollectionView * _Nonnull)collectionView willDisplayCell:(UICollectionViewCell * _Nonnull)cell forItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewDidEndDragging:(UIScrollView * _Nonnull)scrollView willDecelerate:(BOOL)decelerate;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


/// This container view exists in order to avoid client’s view constraint conflicting with the mainContainer’s contraints.
/// In particular, the views of Fleksy apps are always wrapped inside an <code>ExternalViewSafeContainer</code>.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK25ExternalViewSafeContainer")
@interface ExternalViewSafeContainer : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)setNeedsLayout;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@protocol UIViewControllerTransitionCoordinator;

/// View at the root of our view hierarchy. Manages the height of the overall view.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK11FKInputView")
@interface FKInputView : UIInputView <UIInputViewAudioFeedback>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame inputViewStyle:(UIInputViewStyle)inputViewStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)willTransitionTo:(CGSize)size with:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)orientationChangeDidBeginWithTransitionSize:(CGSize)size SWIFT_DEPRECATED_MSG("Instead of calling 'orientationChangeDidBegin(transitionSize:)` and `orientationChangeDidEnd(coordinator:)`, just call `willTransition(to: with:)");
- (void)orientationChangeDidEndWith:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator SWIFT_DEPRECATED_MSG("Instead of calling 'orientationChangeDidBegin(transitionSize:)` and `orientationChangeDidEnd(coordinator:)`, just call `willTransition(to: with:)");
- (void)didMoveToSuperview;
- (void)refreshKeyboardHeight;
/// To set the height of the custom frame view of the keyboard
- (void)updateCustomHeight:(CGFloat)height;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end

@class UIViewController;

@interface FKInputView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyViewControllerPresenter>
- (void)pullDownGestureWithOffset:(CGFloat)offset view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
- (void)pullDownGestureEndedWithOffset:(CGFloat)offset velocity:(CGFloat)verticalVelocity view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
@end

@class UITraitCollection;

/// This class only exists to abstract all the functionality from the public <code>FKInputView</code>.
/// Because for FleksyApps, we need to <code>import FleksyAppsCore</code>, if <code>FKInputViewContent</code> didn’t exist,
/// using <code>FKInputView</code> from ObjC code seems not to be allowed
/// (e.g. from <code>FKInterfaceInputViewController.m</code> or from <code>FKKeyboardViewController.m</code>),
/// raising a compile-time error only when archiving the framework (not when building from Xcode).
/// The error is of the type:
/// \code
/// Undefined symbols for architecture arm64
/// Symbol: _OBJC_CLASS_$__TtC17FleksyKeyboardSDK11FKInputView
/// Referenced from: objc-class-ref in FKKeyboardViewController-7c67d071c60e77b93049361e64c7b02c.o
///
/// \endcodeTo avoid the error, we created <code>FKInputViewContent</code> to avoid <code>import FleksyAppsCore</code> in <code>FKInputView</code>. <code>FKInputView</code> is basically a ObjC wrapper around the public functionality of <code>FKInputViewContent</code>. This way, we did not break API compatiblity with previous versions of the SDK.
/// TODO: Remove wrapper when <code>FKInputView</code> can only be called from Swift (remember: for that we will need to remove the possibility of integrating the Keyboard SDK in Objective-C, since at that moment, Swift’s <code>FKKeyboardViewController</code> won’t be “subclassable” in ObjC. See FKKeyboardViewController.h
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18FKInputViewContent")
@interface FKInputViewContent : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic) CGRect bounds;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
@end



@interface FKInputViewContent (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyViewControllerPresenter>
- (void)pullDownGestureWithOffset:(CGFloat)offset view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
- (void)pullDownGestureEndedWithOffset:(CGFloat)offset velocity:(CGFloat)verticalVelocity view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
@end


/// This is a legacy class to enable donwloading and removing languages. Please, use <code>LanguagesHelper</code> instead.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK17FKInterfaceHelper")
@interface FKInterfaceHelper : NSObject
/// Downloads the given language.
/// This method downloads the list of available languages initially, in case this list has not been downloaded yet.
/// \param language  A string with the value of the language [language ISO 639-1]-[Country ISO 3166-alpha2].
///
/// \param progress A progress-reporting block. 
///
/// \param completion A block that executes when the language finishes downloading. A <code>nil</code> error means that the language downloaded successfully.
///
- (void)downloadLanguage:(NSString * _Nonnull)language progress:(void (^ _Nullable)(float))progress completion:(void (^ _Nullable)(NSError * _Nullable))completion;
/// Remove the language Installed.
/// \param language The language to remove.
///
- (void)removeLanguage:(NSString * _Nonnull)language;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol FKInterfaceInputViewControllerDelegate;
@class KeyboardConfiguration;
@protocol FKDataCollection;
@class UIImage;
@class UIFont;
@protocol FKInterfaceDelegate;
@class CaptureConfiguration;
@class KeyboardDynamicConfiguration;
@class NSNumber;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK30FKInterfaceInputViewController")
@interface FKInterfaceInputViewController : NSObject <FKInterfaceProtocol>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView view:(UIView * _Nonnull)view textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController configuration:(KeyboardConfiguration * _Nonnull)configuration SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController output:(id <FKDataCollection> _Nullable)output configuration:(KeyboardConfiguration * _Nonnull)configuration appIcon:(UIImage * _Nullable)appIcon SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
- (nonnull instancetype)initWith:(FKInputView * _Nonnull)inputView textDocumentProxy:(id <UITextDocumentProxy> _Nonnull)textDocumentProxy trailCollection:(UITraitCollection * _Nonnull)trailCollection protocol:(UIInputViewController <FKInterfaceInputViewControllerDelegate> * _Nonnull)inputController output:(id <FKDataCollection> _Nullable)output configuration:(KeyboardConfiguration * _Nullable)configuration SWIFT_DEPRECATED_MSG("Subclass FKKeyboardViewController to integrate the SDK");
@property (nonatomic, readonly, strong) UIFont * _Nullable keypadFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable lowercaseKeysFont;
- (void)viewWillAppear;
- (void)viewDidAppear;
- (void)viewWillDisappear;
- (void)viewDidDisappear;
- (void)didMoveToParent:(UIViewController * _Nullable)parent;
- (void)traitCollectionDidChangeWithPrevious:(UITraitCollection * _Nullable)previousTraitCollection new:(UITraitCollection * _Nonnull)newTraitCollection;
- (void)didReceiveMemoryWarning;
- (void)settingsChanged:(NSNotification * _Nonnull)notification;
- (void)leadingTopBarButtonPressed;
- (void)setInterfaceDelegate:(id <FKInterfaceDelegate> _Nonnull)interfaceDelegate;
- (void)insertText:(NSString * _Nonnull)text;
- (void)replaceText:(NSString * _Nonnull)text inRange:(NSRange)range;
- (void)replaceAllTextWith:(NSString * _Nonnull)text;
- (void)deleteBackward;
- (void)deleteBackwardWord;
- (void)insertWordPrediction:(NSString * _Nonnull)prediction withType:(WordPredictionType)type;
- (void)updateFlaggedWordsFile:(NSString * _Nonnull)filePath forLanguage:(NSString * _Nonnull)language;
- (void)enableCollectionActions:(BOOL)value collectionText:(BOOL)text;
- (void)loadCollectionActions:(CaptureConfiguration * _Nonnull)capture;
- (void)enableEncryptionWithKey:(NSString * _Nonnull)key;
- (void)subscribeEventBus:(NSArray<NSString *> * _Nonnull)arrayEvents;
- (UIView * _Nullable)getPanelCustomTopbarView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)reloadTheme:(NSDictionary * _Nonnull)theme SWIFT_WARN_UNUSED_RESULT;
- (BOOL)changeLanguageTo:(NSString * _Nonnull)languageCode layout:(NSString * _Nonnull)layout SWIFT_WARN_UNUSED_RESULT;
- (void)updateKeyboardInsets:(UIEdgeInsets)insets;
- (void)addWordUserDictionary:(NSString * _Nonnull)word;
- (NSArray<NSString *> * _Nonnull)listWordUserDictionary SWIFT_WARN_UNUSED_RESULT;
- (void)removeWordUserDictionary:(NSString * _Nonnull)word;
- (void)removeAllWordsUserDictionary;
- (void)deleteAutolearnDictionary;
- (void)reloadSettings;
- (void)reloadDynamicConfiguration:(KeyboardDynamicConfiguration * _Nonnull)configuration;
- (void)addCustomCollectedData:(NSDictionary * _Nonnull)dict;
- (void)flushCollectedData;
- (void)debugFlushRestartTypingSession;
- (void)debugSendPoint:(CGPoint)point endPoint:(CGPoint)endPoint diff:(NSTimeInterval)time;
- (void)debugSendPrediction:(CGPoint)point endPoint:(CGPoint)endPoint diff:(NSTimeInterval)time;
@property (nonatomic, readonly) NSInteger activationStatus;
@property (nonatomic, readonly, copy) NSSet<NSNumber *> * _Nonnull licenseCapabilities;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyThemeableUI>
@end



@class UIGestureRecognizer;

@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UIGestureRecognizerDelegate>
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
- (void)textWillChange:(id <UITextInput> _Nullable)textInput;
- (void)textDidChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionWillChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionDidChange:(id <UITextInput> _Nullable)textInput;
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyCursorControlDelegate>
@property (nonatomic, readonly) CGFloat keyboardContainerHeight;
@property (nonatomic) BOOL isShowingCursorControl;
@end




@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
- (void)pullDownGestureWithOffset:(CGFloat)offset view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
- (void)pullDownGestureEndedWithOffset:(CGFloat)offset velocity:(CGFloat)verticalVelocity view:(UIView * _Null_unspecified)view presentedViewController:(UIViewController * _Null_unspecified)controller;
@end


@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, readonly, strong) UIFont * _Nullable extensionKeysFont;
@end



@interface FKInterfaceInputViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, readonly) BOOL isJapanese;
@property (nonatomic, readonly) BOOL isFlickKeyboard;
@end

/// Represents the license activation status of the SDK.
typedef SWIFT_ENUM(NSInteger, FKKeyboardActivationStatus, open) {
/// Invalid license. This happens due to having received an invalid license.
/// The capabilities of the SDK might be limited.
  FKKeyboardActivationStatusInvalid = 0,
/// License valid. All SDK functionality enabled according to license capabilities.
  FKKeyboardActivationStatusValid = 1,
};

/// Represents the license capabilities of the SDK.
typedef SWIFT_ENUM(NSInteger, FKKeyboardLicenseCapability, open) {
/// Health capability.
  FKKeyboardLicenseCapabilityHealth = 0,
/// Themes capability.
  FKKeyboardLicenseCapabilityThemes = 1,
/// CoreSDK capability.
  FKKeyboardLicenseCapabilityCoreSDK = 2,
/// Monitor stress capability.
  FKKeyboardLicenseCapabilityMonitorStress = 3,
  FKKeyboardLicenseCapabilityFleksyAppAdsTiles = 4,
  FKKeyboardLicenseCapabilityStoreData = 5,
};

@class KeyboardProperties;

SWIFT_CLASS_NAMED("FKKeyboardViewController")
@interface FKKeyboardViewControllerSwift : UIInputViewController <FKInterfaceInputViewControllerDelegate>
/// Initialized after <code>viewDidLoad</code> is called.
@property (nonatomic, readonly, strong) id <FKInterfaceProtocol> _Null_unspecified interface;
- (void)loadView;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)didMoveToParentViewController:(UIViewController * _Nullable)parent;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (void)didReceiveMemoryWarning;
- (void)textWillChange:(id <UITextInput> _Nullable)textInput;
- (void)textDidChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionDidChange:(id <UITextInput> _Nullable)textInput;
- (void)selectionWillChange:(id <UITextInput> _Nullable)textInput;
/// The image to display on the left button of the top bar of the keyboard. Override this variable to customize this icon or to return <code>nil</code> if you want to to remove the icon and the <code>triggerOpenApp()</code> action it triggers.
/// The <code>KeyboardTheme</code>’s <code>keyLetters</code> color will be used as the tint color of the image, which only applies if the image is rendered as a template (see <a href="https://developer.apple.com/documentation/uikit/uiimage/1624153-withrenderingmode">Apple’s documentation</a>)
/// To optimize memory usage of the app extension, try to keep the image size as small as possible.
/// important:
/// This property is ignored if you override <code>leadingTopBarView</code>.
@property (nonatomic, readonly, strong) UIImage * _Nullable appIcon;
/// The leading view next to predictions in the top bar. Override this variable to customize this view.
/// <ul>
///   <li>
///     The default implementation returns a <code>UIButton</code> that shows the <code>appIcon</code> image. If you override the <code>appIcon</code> property and return <code>nil</code>, then nothing will be shown.
///   </li>
///   <li>
///     If you override this variable and return <code>nil</code> then nothing will be shown.
///   </li>
///   <li>
///     The width of the view is limited by the total width of the top bar. You can choose your desired width for this view using autolayout, but it will never be greater than the maximum allowed width. If the view’s width is smaller than the maximum allowed width, then the SDK will respect it. Lay out your custom view considering this.
///   </li>
///   <li>
///     The height of the view is limited by the height of the top bar. If the view’s height is smaller than the top height, it will appear centered vertically in the top bar. It is recommended not to constraint the view’s height to let it adapt to the top bar’s height.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIView * _Nullable leadingTopBarView;
/// The trailing view next to predictions in the top bar. Override this variable to customize this view.
/// <ul>
///   <li>
///     The default implementation returns <code>nil</code>.
///   </li>
///   <li>
///     If this variable is <code>nil</code> then nothing will be shown on the trailing edge of the predictions.
///   </li>
///   <li>
///     The width of the view is limited by the total width of the top bar. You can choose your desired width for this view using autolayout, but it will never be greater than the maximum allowed width. If the view’s width is smaller than the maximum allowed width, then the SDK will respect it. Lay out your custom view considering this.
///   </li>
///   <li>
///     The height of the view is limited by the height of the top bar. If the view’s height is smaller than the top height, it will appear centered vertically in the top bar. It is recommended not to constraint the view’s height to let it adapt to the top bar’s height.
///   </li>
/// </ul>
@property (nonatomic, readonly, strong) UIView * _Nullable trailingTopBarView;
- (void)addKeyboardViewController:(UIViewController * _Nonnull)currentKeyboardVC;
- (void)addDisplayedViewController:(UIViewController <FleksyThemeableUI> * _Nonnull)displayVC;
- (void)addExtensionsViewController:(UIViewController * _Nonnull)extensionsVC;
- (void)dismissKeyboardButton;
- (void)changeKeyboardButton;
/// This method is called whenever the keyboard frame changes.
/// The keyboard frame can change, for example, when the user rotates the device or when there’s a layout change. Use <code>keyboardFrame</code> to get the latest frame of the keyboard container view.
/// Override this method if you need to react to keyboard size changes. For example, if your FleksyApp needs to adapt its height to the keyboard frame change. You can read <code>keyboardFrame</code>, <code>topBarHeight</code> and <code>bottomKeyboardOffset</code> to know the remaining avaliable vertical space for your FleksyApp in <code>frame</code> mode. Depending on whether your FleksyApp keeps or hides the top bar (<code>TopBarMode</code>), the available vertical space for you app can be calculated like this:
/// \code
/// // For hidden top bar:
/// let availableHeight = UIScreen.main.bounds.height - keyboardFrame.height - bottomKeyboardOffset
///
/// // For visible top bar:
/// let availableHeight = UIScreen.main.bounds.height - topBarHeight - keyboardFrame.height - bottomKeyboardOffset
///
/// \endcodeimportant:
/// always call <code>super</code>’s implementation at some point if you override this method.
- (void)onKeyboardFrameChanged;
- (void)eventBus:(NSString * _Nonnull)event payload:(NSDictionary * _Nullable)dictPayload;
- (void)sessionStarted:(NSString * _Nonnull)sessionId;
- (void)sessionEnded:(NSString * _Nonnull)sessionId;
- (void)dataCollection:(NSString * _Nonnull)data sessionId:(NSString * _Nonnull)sessionId;
- (void)dataCollection:(NSString * _Nonnull)data SWIFT_DEPRECATED_MSG("", "dataCollection:sessionId:");
- (void)dataCollectionFormatDict:(NSDictionary * _Nonnull)data sessionId:(NSString * _Nonnull)sessionId;
- (void)dataCollectionFormatDict:(NSDictionary * _Nonnull)data SWIFT_DEPRECATED_MSG("", "dataCollectionFormatDict:sessionId:");
- (void)dataCollectionStored:(NSString * _Nonnull)path sessionId:(NSString * _Nonnull)sessionId;
- (void)reportAnalytics:(NSDictionary * _Nonnull)data;
- (void)onLayoutChanges:(NSDictionary * _Nonnull)dictLayout;
- (void)updateKeyboardAppsTextDocumentProxy:(id <UITextDocumentProxy> _Nullable)documentProxy;
- (void)contextPropertiesChanged:(KeyboardProperties * _Nonnull)properties;
- (void)triggerOpenApp;
- (void)leadingTopBarButtonPressed:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end





/// Class used to show custom buttons defined by integrators via a custom .bundle file.
/// These buttons are identified in the .bundle file as those with:
/// <ul>
///   <li>
///     The <code>"name"</code> key set to <code>"custom_label"</code>.
///   </li>
///   <li>
///     The <code>"type"</code> key set to <code>"action-button"</code>.
///     The value for the <code>"label"</code> key is used as the button label, unless the integrators
///     defines a custom <code>UIImage</code> for it.
///   </li>
/// </ul>
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18FleksyCustomButton")
@interface FleksyCustomButton : FleksyButton
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (void)layoutSubviews;
@property (nonatomic) BOOL isShowingCursorControl;
- (null_unspecified instancetype)initWithDisplayLabel:(NSString * _Nonnull)displayLabel theme:(FleksyTheme * _Nullable)theme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)styleClass keyboardStyle:(KeyboardStyle)keyboardStyle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class is used for buttons that change how they are displayed depending on the keyboard interface mode they are used in.
/// For example, the backspace (delete) button is displayed with the backspace icon in iPhone keyboards. In the full-sized iPad keyboard, in English it shows the “delete” word instead.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK19FleksyDynamicButton")
@interface FleksyDynamicButton : FleksyButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
@property (nonatomic) ButtonType buttonType;
@property (nonatomic) BOOL isShowingCursorControl;
- (void)changeType:(ButtonType)type;
- (void)setTitleColors;
- (UIColor * _Null_unspecified)buttonBackgroundColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Null_unspecified)pressedButtonBackgroundColor SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithDisplayLabel:(NSString * _Nonnull)displayLabel theme:(FleksyTheme * _Nullable)theme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)styleClass keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK19FleksyEngineManager")
@interface FleksyEngineManager : NSObject
/// Composing region of the engine. This is what is used to figure out what to replace when the engine outputs text.
@property (nonatomic, readonly) NSRange composingRegion;
/// Moves the cursor position by offset composed character sequences.
/// A positive <code>offset</code> moves the cursor to the right. A negative <code>offset</code> moves the cursor to the left.
/// Causes <code>textDidChange:</code> to be called.
/// \param offset The offset to move the cursor, in composed character sequences.
///
- (void)adjustCursorPositionByOffset:(NSInteger)offset;
- (void)settingsChanged:(NSNotification * _Nonnull)notification;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



@interface FleksyEngineManager (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyKeyboardDisplayStateInfoProvider>
@property (nonatomic, readonly, copy) NSString * _Nonnull magicButtonIcon;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified enterButtonIcon;
@end


@class FleksyExternalEditorState;
@class KeyStrokeEventPayloadCppWrapper;
@class DeleteEventPayloadCppWrapper;
@class KeyPlaneEventPayloadCppWrapper;
@class WordEventPayloadCppWrapper;
@class SwipeEventPayloadCppWrapper;
@class SessionUpdateEventPayloadCppWrapper;
@class StressUpdateEventPayloadCppWrapper;

@interface FleksyEngineManager (SWIFT_EXTENSION(FleksyKeyboardSDK)) <FleksyAPIManagerDelegate>
- (void)setSelection:(NSRange)range;
- (FleksyExternalEditorState * _Nonnull)keyboardState SWIFT_WARN_UNUSED_RESULT;
/// This method hooks the send composing text back to originating view (textView or textField according to the inputView property)
- (BOOL)replaceComposingText:(NSString * _Null_unspecified)someText SWIFT_WARN_UNUSED_RESULT;
- (void)storeComposingRangeStart:(int32_t)start end:(int32_t)end;
- (void)messageReceivedFromAPI:(MessageType)type message:(NSString * _Null_unspecified)message;
- (void)dictionaryModifiedFromAPIWithEvent:(DictionaryChangeEvent)event word:(NSString * _Null_unspecified)word;
- (void)selectedSuggestionsChangedFromAPI:(int32_t)selectedIndex;
- (void)sendSpeakFromAPI:(NSString * _Null_unspecified)text;
- (void)requestLayoutChangeFromEngine:(KeyboardID)keyboardID;
- (void)typeChanged:(ButtonType)type forButtonsOfType:(ButtonType)oldType;
- (void)respondToAPIError:(FSAPIManagerErrorCode)error;
- (void)highlightsReceivedFromEngine:(NSString * _Null_unspecified)stringJson;
- (void)nextWordPredictionsReceivedFromEngine:(NSArray<NSString *> * _Nullable)predictions predictionTypes:(NSArray<NSNumber *> * _Nullable)predictionTypes;
- (void)japanesePredictionsReceivedFromEngine:(NSArray<NSString *> * _Nullable)predictions;
- (void)onDelete;
- (void)onReportCorrectionCounts:(NSString * _Null_unspecified)langCode none:(NSUInteger)none missSpace:(NSUInteger)missSpace missTypedSpace:(NSUInteger)cvbSpace eliminated:(NSUInteger)elim transposition:(NSUInteger)trans missing:(NSUInteger)missing controller:(NSUInteger)tc;
- (BOOL)buttonPressed:(ButtonType)button SWIFT_WARN_UNUSED_RESULT;
- (void)onDataCaptureKeyStrokeEventWithPayload:(KeyStrokeEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureDeleteEventWithPayload:(DeleteEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureKeyPlaneEventWithPayload:(KeyPlaneEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureWordEventWithPayload:(WordEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureSwipeEventWithPayload:(SwipeEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureSessionUpdateEventWithPayload:(SessionUpdateEventPayloadCppWrapper * _Null_unspecified)payload;
- (void)onDataCaptureStressUpdateEventWithPayload:(StressUpdateEventPayloadCppWrapper * _Null_unspecified)payload;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK17FleksyEnterButton")
@interface FleksyEnterButton : FleksyEmojiHintButton
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (null_unspecified instancetype)initWithIcon:(NSString * _Null_unspecified)iconChar cornerIcon:(NSString * _Null_unspecified)cornerIconChar theme:(FleksyTheme * _Null_unspecified)aTheme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)aStyleClass keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_UNAVAILABLE;
- (null_unspecified instancetype)initWithDisplayLabel:(NSString * _Nonnull)displayLabel theme:(FleksyTheme * _Nullable)theme inFlickKeyboard:(BOOL)inFlickKeyboard styleClass:(FleksyButtonStyleClass)styleClass keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class FleksyLayoutElement;

/// Keyboard key with support of flick down gesture to get alternative character. Exclusive for full-sized iPad keyboard.
/// This class is only supported if the <code>FleksyTheme</code>’s <code>isLookFeelSystem</code> is <code>true</code>
SWIFT_CLASS("_TtC17FleksyKeyboardSDK14FleksyFlickKey")
@interface FleksyFlickKey : UIView <FleksyKeyboardKey>
- (nonnull instancetype)initWithFrame:(CGRect)frame uniqueID:(int32_t)uniqueID buttonType:(ButtonType)buttonType letter:(NSString * _Nonnull)letter altCharacter:(NSString * _Nullable)altCharacter font:(UIFont * _Nonnull)font lowercaseFont:(UIFont * _Nonnull)lowercaseFont theme:(FleksyTheme * _Nullable)theme keyboardStyle:(KeyboardStyle)keyboardStyle OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSString * _Nonnull letter;
@property (nonatomic, copy) NSString * _Nullable altCharacter;
@property (nonatomic, strong) UIFont * _Nonnull letterFont;
@property (nonatomic, strong) UIFont * _Nonnull lowercaseLetterFont;
@property (nonatomic) int32_t uniqueID;
@property (nonatomic) ButtonType buttonType;
- (void)setDimmed:(BOOL)dimm animated:(BOOL)animated;
- (void)setFrameApplyingMarginsToFrame:(CGRect)frame;
@property (nonatomic) BOOL isShowingCursorControl;
- (BOOL)isAssociatedToElement:(FleksyLayoutElement * _Nonnull)element SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (void)highlight;
- (void)pop;
- (void)highlightForTemporaryKeypad;
- (void)restore;
- (void)restoreWithAnimationDuration:(NSTimeInterval)duration;
- (void)dragPopWithShiftY:(CGFloat)shiftY duration:(NSTimeInterval)duration isSidePop:(BOOL)isSidePop;
- (void)containerSwiped:(FleksyTouchSwipeDirection)swipeDirection;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// View that manages keypad UI. It contains all the keys and buttons that make up the keypad.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK16FleksyKeyPadView")
@interface FleksyKeyPadView : UIView <FleksyThemeableUI, FleksyVibrantViewContainer>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
@property (nonatomic) BOOL isInAlphaAnimation;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic) CGRect frame;
@property (nonatomic) CGRect bounds;
- (void)globeButtonTouchEvent:(FleksyButton * _Nonnull)button event:(UIEvent * _Nonnull)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK28FleksyKeyboardViewController")
@interface FleksyKeyboardViewController : UIViewController <FleksyEngineButtonHandler, FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)backSpaceHoldContinued;
- (BOOL)buttonPressed:(ButtonType)buttonType SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) BOOL isFlickKeyboard;
@property (nonatomic, readonly) BOOL isJapanese;
@property (nonatomic, readonly, strong) UIFont * _Nullable keypadFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable lowercaseKeysFont;
@property (nonatomic, readonly, strong) UIFont * _Nullable extensionKeysFont;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




@interface FleksyKeyboardViewController (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, readonly, strong) UIView * _Nullable inputView;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified magicButtonIcon;
@property (nonatomic, readonly, copy) NSString * _Null_unspecified enterButtonIcon;
@end





@interface FleksyUtility (SWIFT_EXTENSION(FleksyKeyboardSDK))
/// Method to check whether the code is running in an App Extension.
///
/// returns:
/// <code>true</code> only when the code is running in an App Extension. In particular, returns <code>true</code> when the code is running in a keyboard extension.
+ (BOOL)isExtension SWIFT_WARN_UNUSED_RESULT;
@end



@interface FleksyUtility (SWIFT_EXTENSION(FleksyKeyboardSDK))
/// Returns a rect with the original size of the keyboard (see <code>StyleConfiguration/KeyboardSize-swift.enum/original</code>).
+ (CGRect)getDefaultFleksyKeyboardSizeWithTraitCollection:(UITraitCollection * _Nonnull)traitCollection SWIFT_WARN_UNUSED_RESULT;
+ (CGRect)applyingKeyOrButtonInsetsToRect:(CGRect)rect isHoverHighlight:(BOOL)isHoverHighlight flickKeyboard:(BOOL)flickKeyboard buttonType:(ButtonType)buttonType keyboardStyle:(KeyboardStyle)keyboardStyle SWIFT_WARN_UNUSED_RESULT;
+ (CGFloat)getPaddingOffSet SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayoutAttributes;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK19FlickPredictionCell")
@interface FlickPredictionCell : UICollectionViewCell
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, getter=isSelected) BOOL selected;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK22FlickPredictionsLayout")
@interface FlickPredictionsLayout : UICollectionViewFlowLayout
- (NSArray<UICollectionViewLayoutAttributes *> * _Nullable)layoutAttributesForElementsInRect:(CGRect)rect SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) UICollectionViewScrollDirection scrollDirection;
- (UICollectionViewLayoutAttributes * _Nullable)layoutAttributesForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewLayoutAttributes * _Nullable)initialLayoutAttributesForAppearingItemAtIndexPath:(NSIndexPath * _Nonnull)itemIndexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldInvalidateLayoutForBoundsChange:(CGRect)newBounds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK20FlickPredictionsView")
@interface FlickPredictionsView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface FlickPredictionsView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDelegateFlowLayout>
- (void)collectionView:(UICollectionView * _Nonnull)collectionView didSelectItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end


@interface FlickPredictionsView (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK24HighlightsViewController")
@interface HighlightsViewController : UIViewController <FleksyThemeableUI>
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end




SWIFT_CLASS("_TtC17FleksyKeyboardSDK33JapanesePredictionsViewController")
@interface JapanesePredictionsViewController : UIViewController <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)actionExpandCollapseButtonPressed:(UIButton * _Nonnull)sender;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



/// Container for key pad long press popups. The actual keys are added to this view from the caller.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK21KeyLongPressPopupView")
@interface KeyLongPressPopupView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class KeyPlaneKeyPayloadObjcWrapper;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK31KeyPlaneEventPayloadObjcWrapper")
@interface KeyPlaneEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithKeyPlaneId:(NSInteger)keyPlaneId keys:(NSArray<KeyPlaneKeyPayloadObjcWrapper *> * _Nonnull)keys OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK29KeyPlaneKeyPayloadObjcWrapper")
@interface KeyPlaneKeyPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithCenter:(CGPoint)center rectangle:(CGRect)rectangle label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class with a set of static methods used to draw the key pops.
SWIFT_CLASS_NAMED("KeyPopupAppearance")
@interface KeyPopupAppearance : NSObject
/// Creates the popup for a Japanese Flick key tap.
+ (UIView * _Nullable)viewForFlickPopWithKeyFrame:(CGRect)keyFrame direction:(FlickDirection)direction letter:(NSString * _Nonnull)letter keyboardFrame:(CGRect)keyboardFrame font:(UIFont * _Nonnull)font theme:(FleksyTheme * _Nonnull)theme SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The view used for the standard key popups.
/// When a key tap happens, the keyboard shows this view, which is masked with
/// the normal key popup shape, visually originating from the key that was tapped.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK13KeyPopupLabel")
@interface KeyPopupLabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLabel:(NSString * _Nonnull)label keyboardFrame:(CGRect)keyboardFrame keyFrame:(CGRect)keyFrame font:(UIFont * _Nonnull)font theme:(FleksyTheme * _Nonnull)theme OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)drawTextInRect:(CGRect)rect;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK32KeyStrokeEventPayloadObjcWrapper")
@interface KeyStrokeEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithPressTime:(int64_t)pressTime releaseTime:(int64_t)releaseTime keyType:(NSInteger)keyType keyText:(NSString * _Nonnull)keyText keyArea:(NSUInteger)keyArea keyCode:(NSUInteger)keyCode keyPressBegin:(CGPoint)keyPressBegin keyPressEnd:(CGPoint)keyPressEnd keyCenter:(CGPoint)keyCenter keyRectangle:(CGRect)keyRectangle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class AppearanceConfiguration;
@class SpecialKeysConfiguration;
@class PanelConfiguration;
@class DebugConfiguration;

/// This is the class that allows you to fine-tune the whole keyboard offered by the FleksySDK. Change the languages, typing experience and much more.
/// You create a <code>KeyboardConfiguration-swift.class</code> object to return it in your override of <code>FKKeyboardViewController-2sctr</code>’s <code>FKKeyboardViewController-2sctr/createConfiguration()-4aaah</code> method.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK21KeyboardConfiguration")
@interface KeyboardConfiguration : NSObject <NSCopying>
@property (nonatomic) BOOL customTopBar;
@property (nonatomic) float heightCustomTopBar;
@property (nonatomic) BOOL needsInputMethodSwitch SWIFT_DEPRECATED_MSG("This property is ignored by the SDK and does not have any effect");
@property (nonatomic, strong) AppearanceConfiguration * _Nonnull appearance SWIFT_DEPRECATED_MSG("All AppearanceConfiguration APIs are deprecated and ignored");
@property (nonatomic, strong) SpecialKeysConfiguration * _Nullable specialKeys SWIFT_DEPRECATED_MSG("The SpecialKeysConfiguration API is deprecated and will be removed in a future release. You can use TypingConfiguration's magicButtonAction and magicButtonLongPressActions parameters to fully customize the magic button");
@property (nonatomic, strong) PanelConfiguration * _Nonnull panel SWIFT_DEPRECATED_MSG("PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
@property (nonatomic, strong) DebugConfiguration * _Nonnull debugConfig;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER SWIFT_DEPRECATED_MSG("Use an initialization that receives a `LicenseConfiguration` object");
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end





@class StyleConfiguration;
@class TypingConfiguration;
@class LicenseConfiguration;

@interface KeyboardConfiguration (SWIFT_EXTENSION(FleksyKeyboardSDK))
@property (nonatomic, strong) CaptureConfiguration * _Nonnull capture SWIFT_DEPRECATED_MSG("Use the `dataCapture` property. Returns a dummy `CaptureConfiguration` when `dataCapture` is different from `.sessionBased`");
@property (nonatomic, strong) StyleConfiguration * _Nullable style SWIFT_DEPRECATED_MSG("Use KeyboardConfiguration initializer in Swift with the style parameter");
@property (nonatomic, strong) EmojiConfiguration * _Nullable emojiConfig SWIFT_DEPRECATED_MSG("Use KeyboardConfiguration initializer in Swift with the emoji parameter");
/// ObjC accessor for <code>typing.spacebarMovesCursor</code>
@property (nonatomic, readonly) BOOL typingSpacebarMovesCursor;
- (nonnull instancetype)initWithPanel:(PanelConfiguration * _Nullable)panel capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance typing:(TypingConfiguration * _Nullable)typing specialKeys:(SpecialKeysConfiguration * _Nullable)specialKeys license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
- (nonnull instancetype)initWithPanel:(PanelConfiguration * _Nullable)panel capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style typing:(TypingConfiguration * _Nullable)typing specialKeys:(SpecialKeysConfiguration * _Nullable)specialKeys license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that uses the `dataCapture` parameter. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
/// Creates the <code>KeyboardConfiguration</code> instance.
/// \param heightCustom The desired height, in points, of the top bar when <code>customView</code> is <code>true</code>. In this case, the minimum height of the top bar will be of 44 pts.
///
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored");
/// Creates the <code>KeyboardConfiguration</code> instance.
/// \param heightCustom The desired height, in points, of the top bar when <code>customView</code> is <code>true</code>. In this case, the minimum height of the top bar will be of 44 pts.
///
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license debug:(DebugConfiguration * _Nullable)debug SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `customView` and `heightCustom` parameters. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style typing:(TypingConfiguration * _Nullable)typing license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style appearance:(AppearanceConfiguration * _Nullable)appearance license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration");
- (nonnull instancetype)initWithCustomView:(BOOL)customView heightCustom:(float)heightCustom capture:(CaptureConfiguration * _Nullable)capture style:(StyleConfiguration * _Nullable)style license:(LicenseConfiguration * _Nonnull)license SWIFT_DEPRECATED_MSG("Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration");
@end


/// Object that wraps the SDK license key and secret.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>LicenseConfiguration</code> struct.
SWIFT_CLASS_NAMED("LicenseConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate LicenseConfiguration initialization to Swift")
@interface LicenseConfiguration : NSObject <NSCopying>
/// The license key for the SDK.
@property (nonatomic, copy) NSString * _Nonnull licenseKey;
/// The license secret for the SDK.
@property (nonatomic, copy) NSString * _Nonnull licenseSecret;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLicenseKey:(NSString * _Nonnull)licenseKey licenseSecret:(NSString * _Nonnull)licenseSecret OBJC_DESIGNATED_INITIALIZER;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC17FleksyKeyboardSDK10MaskedView")
@interface MaskedView : UIView
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// View used as vertical separator between groups (<code>PredictionsItemGroup</code>s) in the predictions bar. Also used as a vertical separator in other places inside the top bar (see <code>AppsCarouselView</code>).
SWIFT_CLASS("_TtC17FleksyKeyboardSDK24PredictionGroupSeparator")
@interface PredictionGroupSeparator : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


/// View that draws prediction items. It is modelled by the <code>PredictionsItemType</code> enum. It shows:
/// <ul>
///   <li>
///     A single <code>TextPredictionView</code> for <code>PredictionsItemType.text</code>.
///   </li>
///   <li>
///     Multiple stacked <code>PredictionItemView</code>s for <code>PredictionsItemType.group(items:)</code> (one <code>PredictionItemView</code> per <code>PredictionsItemType</code> in the <code>items</code> array).
///   </li>
///   <li>
///     No views for <code>PredictionsItemType.text</code>.
///   </li>
/// </ul>
/// With this recursive approach we can easily get to any combinations of predictions (e.g. [ “Monkey” | <em>empty</em> | 🙈 | 🙉 | 🙊 ])
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18PredictionItemView")
@interface PredictionItemView : UIView <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// The view that contains all text and emoji predictions/suggestions.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK15PredictionsView")
@interface PredictionsView : UIView <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)touchesBegan:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesMoved:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesEnded:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (void)touchesCancelled:(NSSet<UITouch *> * _Nonnull)touches withEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK36SessionUpdateEventPayloadObjcWrapper")
@interface SessionUpdateEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithTimeZone:(double)timeZone layout:(NSString * _Nonnull)layout textField:(NSInteger)textField language:(NSString * _Nonnull)language languageVersion:(NSString * _Nonnull)languageVersion appContext:(NSString * _Nonnull)appContext schemaVersion:(NSString * _Nonnull)schemaVersion keyboardAreaWidth:(NSInteger)keyboardAreaWidth keyboardAreaHeight:(NSInteger)keyboardAreaHeight screenWidthMm:(double)screenWidthMm screenHeightMm:(double)screenHeightMm screenWidthPx:(NSInteger)screenWidthPx screenHeightPx:(NSInteger)screenHeightPx startTimestamp:(int64_t)startTimestamp endTimestamp:(int64_t)endTimestamp sessionText:(NSString * _Nonnull)sessionText OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK35StressUpdateEventPayloadObjcWrapper")
@interface StressUpdateEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithStress:(NSInteger)stress regime:(NSInteger)regime OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Object to configure some of the style settings from Objective-C.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>StyleConfiguration</code> class.
SWIFT_CLASS_NAMED("StyleConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate StyleConfiguration initialization to Swift")
@interface StyleConfiguration : NSObject <NSCopying>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTheme:(NSDictionary<NSString *, id> * _Nonnull)theme withDarkTheme:(NSDictionary<NSString *, id> * _Nonnull)darkTheme OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull dictForceTheme;
@property (nonatomic, copy) NSDictionary<NSString *, id> * _Nonnull dictForceDarkTheme;
@property (nonatomic, copy) NSString * _Nullable spacebarLogo;
@property (nonatomic) BOOL fitSpacebarLogo;
@property (nonatomic) enumSpacebarStyle spacebarStyle;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC17FleksyKeyboardSDK32SwipeCandidatePayloadObjcWrapper")
@interface SwipeCandidatePayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithCandidate:(NSString * _Nonnull)candidate shapeProb:(double)shapeProb finalProb:(double)finalProb OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SwipeFeaturePayloadObjcWrapper;

SWIFT_CLASS("_TtC17FleksyKeyboardSDK28SwipeEventPayloadObjcWrapper")
@interface SwipeEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithContext:(NSString * _Nonnull)context features:(NSArray<SwipeFeaturePayloadObjcWrapper *> * _Nonnull)features word:(NSString * _Nonnull)word selectedSuggestion:(NSString * _Nonnull)selectedSuggestion layout:(NSString * _Nonnull)layout timestamp:(uint64_t)timestamp candidates:(NSArray<SwipeCandidatePayloadObjcWrapper *> * _Nonnull)candidates OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK30SwipeFeaturePayloadObjcWrapper")
@interface SwipeFeaturePayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithPoint:(CGPoint)point timestamp:(uint64_t)timestamp label:(NSString * _Nonnull)label OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// The popup view for a long press key tap, masked with the long press key popup shape.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK10TempKeypad")
@interface TempKeypad : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


@interface TempKeypad (SWIFT_EXTENSION(FleksyKeyboardSDK))
@end


/// The basic view to show a single text prediction. Only to be used by <code>PredictionItemView</code>.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK18TextPredictionView")
@interface TextPredictionView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK15ThemeableButton")
@interface ThemeableButton : UIButton <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This class manages the SDK view controllers that appear in the top bar. Namely, <code>HighlightsViewController</code>, <code>JapanesePredictionsViewController</code> and <code>FKEmptyViewController</code>.
SWIFT_CLASS("_TtC17FleksyKeyboardSDK20TopBarViewController")
@interface TopBarViewController : UIViewController <FleksyThemeableUI>
@property (nonatomic, strong) FleksyTheme * _Nullable theme;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Object to configure some of the typing settings from Objective-C.
/// This class is only meant to be used from Objective-C. If you’re using Swift, use the <code>TypingConfiguration</code> struct.
SWIFT_CLASS_NAMED("TypingConfigurationObjC") SWIFT_DEPRECATED_MSG("Migrate TypingConfiguration initialization to Swift")
@interface TypingConfiguration : NSObject <NSCopying>
/// A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard. Defaults to <code>true</code> .
@property (nonatomic, readonly) BOOL keitaiEnabled;
/// The amount of delay seconds for the Keitai rotations. Only considered when <code>keitaiEnabled</code> is <code>true</code>. Defaults to <code>FLEKSY_DEFAULT_KEITAI_DELAY</code>.
@property (nonatomic, readonly) NSTimeInterval keitaiDelay;
/// A boolean indicating whether the spacebar can move the cursor on a long press.
@property (nonatomic, readonly) BOOL spacebarMovesCursor;
/// If this array is present, SDK uses this array to show up when we long press in the “punctuation” key, next to the enter key.
@property (nonatomic, copy) NSArray<NSString *> * _Nullable arrayPunctuationSymbols;
/// Initializes the <code>TypingConfiguration</code> allowing to configure the Keitai mode and spacebar long-press behavior.
/// \param keitaiEnabled A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard.
///
/// \param keitaiDelay The amount of delay seconds for the Keitai rotations. Only considered when <code>keitaiEnabled</code> is <code>true</code>.
///
/// \param spacebarMovesCursor A boolean indicating whether the spacebar can move the cursor on a long press.
///
- (nonnull instancetype)initWithKeitaiEnabled:(BOOL)keitaiEnabled keitaiDelay:(NSTimeInterval)keitaiDelay spacebarMovesCursor:(BOOL)spacebarMovesCursor OBJC_DESIGNATED_INITIALIZER;
/// Initializes the <code>TypingConfiguration</code> with default settings.
- (nonnull instancetype)init;
/// Initializes the <code>TypingConfiguration</code> allowing to enable/disable the Keitai mode.
/// \param keitaiEnabled A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard.
///
- (nonnull instancetype)initWithKeitaiEnabled:(BOOL)keitaiEnabled;
/// Initializes the @c TypingConfiguration allowing to configure the Keitai mode.
/// \param keitaiEnabled A boolean indicating whether keitai mode is enabled for the Japanese Flick keyboard.
///
/// \param keitaiDelay The amount of delay seconds for the Keitai rotations. Only considered when <code>keitaiEnabled</code> is <code>true</code>.
///
- (nonnull instancetype)initWithKeitaiEnabled:(BOOL)keitaiEnabled keitaiDelay:(NSTimeInterval)keitaiDelay;
/// Initializes the <code>TypingConfiguration</code> allowing to enable/disable spacebar long-press behaviour.
/// \param spacebarMovesCursor A boolean indicating whether the spacebar can move the cursor on a long press.
///
- (nonnull instancetype)initWithSpacebarMovesCursor:(BOOL)spacebarMovesCursor;
- (id _Nonnull)copyWithZone:(struct _NSZone * _Nullable)zone SWIFT_WARN_UNUSED_RESULT;
@end










SWIFT_CLASS("_TtC17FleksyKeyboardSDK26UITextFieldDelegateWrapper")
@interface UITextFieldDelegateWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIMenuElement;
@class UIMenu;
@protocol UIEditMenuInteractionAnimating;

@interface UITextFieldDelegateWrapper (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidChangeSelection:(UITextField * _Nonnull)textField;
- (UIMenu * _Nullable)textField:(UITextField * _Nonnull)textField editMenuForCharactersInRange:(NSRange)range suggestedActions:(NSArray<UIMenuElement *> * _Nonnull)suggestedActions SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textField:(UITextField * _Nonnull)textField willPresentEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textField:(UITextField * _Nonnull)textField willDismissEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
@end


SWIFT_CLASS("_TtC17FleksyKeyboardSDK25UITextViewDelegateWrapper")
@interface UITextViewDelegateWrapper : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSTextAttachment;
@class NSURL;

@interface UITextViewDelegateWrapper (SWIFT_EXTENSION(FleksyKeyboardSDK)) <UITextViewDelegate>
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT;
- (UIMenu * _Nullable)textView:(UITextView * _Nonnull)textView editMenuForTextInRange:(NSRange)range suggestedActions:(NSArray<UIMenuElement *> * _Nonnull)suggestedActions SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textView:(UITextView * _Nonnull)textView willDismissEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
- (void)textView:(UITextView * _Nonnull)textView willPresentEditMenuWithAnimator:(id <UIEditMenuInteractionAnimating> _Nonnull)animator SWIFT_AVAILABILITY(ios,introduced=16);
@end


@interface UITraitCollection (SWIFT_EXTENSION(FleksyKeyboardSDK))
/// The style of keyboard defined by the trait collection.
- (KeyboardStyle)keyboardStyleForAvailableWidth:(CGFloat)width SWIFT_WARN_UNUSED_RESULT;
@end




SWIFT_CLASS("_TtC17FleksyKeyboardSDK27WordEventPayloadObjcWrapper")
@interface WordEventPayloadObjcWrapper : NSObject
- (nonnull instancetype)initWithOriginalWord:(NSString * _Nonnull)originalWord word:(NSString * _Nonnull)word timestamp:(int64_t)timestamp autocorrectionType:(NSInteger)autocorrectionType autocorrectionNumber:(int64_t)autocorrectionNumber isAutoCorrectedWord:(NSInteger)isAutoCorrectedWord isPredictedWord:(NSInteger)isPredictedWord isSwipeWord:(NSInteger)isSwipeWord uniP:(double)uniP OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
