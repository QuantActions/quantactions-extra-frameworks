// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name FleksyKeyboardSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreGraphics
import CoreHaptics
import CoreMotion
import DeveloperToolsSupport
import FleksyAppsCore
@_exported import FleksyKeyboardSDK
import Foundation
import OSLog
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum ActivityEvent {
  public enum ActionType {
    case backspace
    case spacebar
    case enter
    case shiftOn
    case shiftOff
    case shiftCapsLock
    case showLetters
    case showNumberAndSymbols
    case showSymbols
    case tap(key: Swift.String)
    case longPressStarted(key: Swift.String)
    case longPressEnded(character: Swift.String)
    case showTrackpad
    case hideTrackpad
    case swipeStarted(key: Swift.String)
    case swipeEnded(word: Swift.String?)
    case showEmojis
    case hideEmojis
    case emojiSent(emoji: Swift.String, variationSource: Swift.String?)
    case flickInput(key: Swift.String, character: Swift.String)
    case t9Rotation(key: Swift.String, character: Swift.String)
    case t9Commit(key: Swift.String, character: Swift.String)
  }
  case keyboardAction(type: FleksyKeyboardSDK.ActivityEvent.ActionType)
  case languageChanged(locale: Swift.String)
  case autoCorrectionChanged(enabled: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc public class FKInterfaceHelper : ObjectiveC.NSObject {
  @objc public func downloadLanguage(_ language: Swift.String, progress: ((Swift.Float) -> Swift.Void)?, completion: (((any Swift.Error)?) -> Swift.Void)?)
  @objc public func removeLanguage(_ language: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
extension FleksyKeyboardSDK.StyleConfiguration {
  public static var defaultLightKeyboardTheme: FleksyKeyboardSDK.KeyboardTheme {
    get
  }
  public static var defaultDarkKeyboardTheme: FleksyKeyboardSDK.KeyboardTheme {
    get
  }
}
@_hasMissingDesignatedInitializers public class FleksyLegacySettings {
  public static func get(_ key: Swift.String) -> Swift.Bool?
  public static func get(_ key: Swift.String) -> Swift.Double?
  public static func get(_ key: Swift.String) -> CoreFoundation.CGFloat?
  public static func get(_ key: Swift.String) -> Swift.String?
  public static func getDefaultEmojiSkinTone() -> FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone?
  @available(*, deprecated, message: "Use FleksyManagedSettings.magicButtonAction")
  public static func getMagicButtonAction() -> FleksyKeyboardSDK.MagicButtonAction?
  @available(*, deprecated, message: "Use FleksyManagedSettings.keyboardFont")
  public static func getKeyboardFont() -> FleksyKeyboardSDK.StyleConfiguration.KeyboardFont?
  @available(*, deprecated, message: "Use FleksyManagedSettings.keyboardSize")
  public static func getKeyboardSize() -> FleksyKeyboardSDK.StyleConfiguration.KeyboardSize?
  @available(*, deprecated, message: "Use FleksyManagedSettings.magicButtonLongPressActions")
  public static func getMagicButtonLongPressActions() -> [FleksyKeyboardSDK.MagicButtonAction]?
  public static func getEmojiPredictionsSetting() -> Swift.Bool?
  public static func getFeedbackConfiguration() -> FleksyKeyboardSDK.FeedbackConfiguration?
  @objc deinit
}
extension UIKit.UITextDocumentProxy {
  @_Concurrency.MainActor(unsafe) public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class EventBus {
  public var activity: Combine.AnyPublisher<FleksyKeyboardSDK.ActivityEvent, Swift.Never> {
    get
  }
  public var dataCapture: Combine.AnyPublisher<FleksyKeyboardSDK.EventBasedDataCaptureEvent, Swift.Never> {
    get
  }
  public var configuration: Combine.AnyPublisher<FleksyKeyboardSDK.ConfigurationEvent, Swift.Never> {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, message: "Migrate TypingConfiguration initialization to Swift")
@objc(TypingConfiguration) public class TypingConfigurationObjC : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var keitaiEnabled: Swift.Bool {
    get
  }
  @objc public var keitaiDelay: Foundation.TimeInterval {
    get
  }
  @objc public var spacebarMovesCursor: Swift.Bool {
    get
  }
  @objc public var arrayPunctuationSymbols: [Swift.String]?
  @objc public init(keitaiEnabled: Swift.Bool, keitaiDelay: Foundation.TimeInterval, spacebarMovesCursor: Swift.Bool)
  @objc convenience override dynamic public init()
  @objc convenience public init(keitaiEnabled: Swift.Bool)
  @objc convenience public init(keitaiEnabled: Swift.Bool, keitaiDelay: Foundation.TimeInterval)
  @objc convenience public init(spacebarMovesCursor: Swift.Bool)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@_inheritsConvenienceInitializers @available(*, deprecated, message: "Migrate LicenseConfiguration initialization to Swift")
@objc(LicenseConfiguration) public class LicenseConfigurationObjC : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public var licenseKey: Swift.String
  @objc public var licenseSecret: Swift.String
  @objc override dynamic public init()
  @objc public init(licenseKey: Swift.String, licenseSecret: Swift.String)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
@available(*, deprecated, renamed: "CustomizationBundleConfiguration")
public typealias CustomLayoutConfiguration = FleksyKeyboardSDK.CustomizationBundleConfiguration
public struct CustomizationBundleConfiguration {
  public struct Button {
    public init(label: Swift.String, image: @autoclosure @escaping () -> UIKit.UIImage?, contentMode: UIKit.UIView.ContentMode = .center, action: @escaping (Swift.String) -> Swift.Void)
  }
  public let bundleFileName: Swift.String
  public let buttons: [FleksyKeyboardSDK.CustomizationBundleConfiguration.Button]
  public init(bundleFileName: Swift.String = "fleksy-custom", buttons: [FleksyKeyboardSDK.CustomizationBundleConfiguration.Button] = [])
}
public struct TypingConfiguration {
  public let caseSensitive: Swift.Bool
  public let smartPunctuation: Swift.Bool
  public let autoCorrect: Swift.Bool
  public let autoCapitalization: Swift.Bool
  public let autoLearn: Swift.Bool
  public let doubleSpaceTapAddsPunctuation: Swift.Bool
  public var magicButtonAction: FleksyKeyboardSDK.MagicButtonAction {
    get
  }
  public var magicButtonLongPressActions: [FleksyKeyboardSDK.MagicButtonAction] {
    get
  }
  public let isMinimal: Swift.Bool
  public let backspaceToUndoAutoCorrection: Swift.Bool
  public let swipeTyping: Swift.Bool
  public let swipeTriggerLength: CoreFoundation.CGFloat
  public var punctuationSymbols: [Swift.String] {
    get
  }
  public var arrayPunctuationSymbols: [Swift.String] {
    get
    set
  }
  public let useAllAccents: Swift.Bool
  public let longPressShowsPunctuation: Swift.Bool
  public let swipeLeftToDelete: Swift.Bool
  public let autoCorrectAfterPunctuation: Swift.Bool
  public let keitaiEnabled: Swift.Bool
  public let keitaiDelay: Foundation.TimeInterval
  public let spacebarMovesCursor: Swift.Bool
  public let numberRow: Swift.Bool
  public init(caseSensitive: Swift.Bool = FleksyManagedSettings.caseSensitive, smartPunctuation: Swift.Bool = FleksyManagedSettings.smartPunctuation, autoCorrect: Swift.Bool = FleksyManagedSettings.autoCorrection, autoCapitalization: Swift.Bool = FleksyManagedSettings.autoCapitalization, autoLearn: Swift.Bool = FleksyManagedSettings.autoLearn, doubleSpaceTapAddsPunctuation: Swift.Bool = FleksyManagedSettings.doubleSpaceTapAddsPunctuation, magicButtonAction: FleksyKeyboardSDK.MagicButtonAction = FleksyManagedSettings.magicButtonAction, magicButtonLongPressActions: [FleksyKeyboardSDK.MagicButtonAction] = FleksyManagedSettings.magicButtonLongPressActions, isMinimal: Swift.Bool = FleksyManagedSettings.isMinimal, backspaceToUndoAutoCorrection: Swift.Bool = FleksyManagedSettings.backspaceToUndoAutoCorrection, swipeTyping: Swift.Bool = FleksyManagedSettings.swipeTyping, swipeTriggerLength: CoreFoundation.CGFloat = FleksyManagedSettings.swipeTriggerLength, punctuationSymbols: [Swift.String] = FleksyManagedSettings.punctuationSymbols, useAllAccents: Swift.Bool = FleksyManagedSettings.useAllAccents, longPressShowsPunctuation: Swift.Bool = FleksyManagedSettings.longPressShowsPunctuation, swipeLeftToDelete: Swift.Bool = FleksyManagedSettings.swipeLeftToDelete, autoCorrectAfterPunctuation: Swift.Bool = FleksyManagedSettings.autoCorrectAfterPunctuation, keitaiEnabled: Swift.Bool = FleksyManagedSettings.keitaiEnabled, keitaiDelay: Foundation.TimeInterval = FleksyManagedSettings.keitaiDelay, spacebarMovesCursor: Swift.Bool = FleksyManagedSettings.spacebarMovesCursor, numberRow: Swift.Bool = FleksyManagedSettings.numberRow)
}
public enum MagicButtonAction {
  case globe
  case emoji
  case hideKeyboard
  case comma
  case autoCorrectToggle
  public static var defaultMagicButtonLongPressActions: [FleksyKeyboardSDK.MagicButtonAction] {
    get
  }
  public static func == (a: FleksyKeyboardSDK.MagicButtonAction, b: FleksyKeyboardSDK.MagicButtonAction) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum KeyboardActivationStatus : Swift.Equatable {
  public typealias Capability = FleksyKeyboardSDK.FKKeyboardLicenseCapability
  case invalid
  case valid(capabilities: Swift.Set<FleksyKeyboardSDK.KeyboardActivationStatus.Capability>)
  public var fkStatus: FleksyKeyboardSDK.FKKeyboardActivationStatus {
    get
  }
  public var capabilities: Swift.Set<FleksyKeyboardSDK.KeyboardActivationStatus.Capability> {
    get
  }
  public static func == (a: FleksyKeyboardSDK.KeyboardActivationStatus, b: FleksyKeyboardSDK.KeyboardActivationStatus) -> Swift.Bool
}
@objc public enum FKKeyboardLicenseCapability : Swift.Int {
  case health
  case themes
  case coreSDK
  case monitorStress
  case fleksyAppAdsTiles
  case storeData
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FKKeyboardActivationStatus : Swift.Int {
  case invalid
  case valid
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct LanguageResource {
  public let locale: Swift.String
  @available(*, deprecated, message: "Use `versionArray` instead to avoid unexpected values")
  public let version: Swift.Float
  public let versionArray: [Swift.Int]
  public let defaultLayout: Swift.String
  public let layouts: [Swift.String]
  public let path: Swift.String
  public let isAsset: Swift.Bool
}
@_inheritsConvenienceInitializers @available(*, deprecated, message: "Migrate StyleConfiguration initialization to Swift")
@objc(StyleConfiguration) public class StyleConfigurationObjC : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc override dynamic public init()
  @objc public init(theme: [Swift.String : Any], withDarkTheme darkTheme: [Swift.String : Any])
  @objc public var dictForceTheme: [Swift.String : Any]
  @objc public var dictForceDarkTheme: [Swift.String : Any]
  @objc public var spacebarLogo: Swift.String?
  @objc public var fitSpacebarLogo: Swift.Bool
  @objc public var spacebarStyle: FleksyKeyboardSDK.enumSpacebarStyle
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public struct KeyboardLanguage : Swift.Codable {
  public let locale: Swift.String
  public let layout: Swift.String
  public init(locale: Swift.String, layout: Swift.String? = nil)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@available(*, deprecated, message: "Migrate EmojiConfiguration initialization to Swift")
@objc(EmojiConfiguration) public class EmojiConfigurationObjC : ObjectiveC.NSObject, Foundation.NSCopying {
  @objc public init(skinTone: FleksyKeyboardSDK.enumEmojiSkinTone)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public enum ConfigurationEvent {
  case activationStatusChanged(status: FleksyKeyboardSDK.KeyboardActivationStatus)
}
@_hasMissingDesignatedInitializers public class LanguagesHelper {
  public static func storedLocales() -> Swift.Set<Swift.String>
  public static func changeLanguage(_ keyboardLanguage: FleksyKeyboardSDK.KeyboardLanguage)
  public static func updateLanguageLayout(_ keyboardLanguage: FleksyKeyboardSDK.KeyboardLanguage)
  public static func getCurrentLayoutForLanguage(_ language: Swift.String) -> Swift.String?
  public static func downloadLanguage(_ language: Swift.String, onProgress: ((_ bytesCurrent: Swift.Float, _ bytesTotal: Swift.Float) -> Swift.Void)? = nil, onComplete: ((Swift.Result<Swift.Void, any Swift.Error>) -> Swift.Void)?)
  public static func availableLanguages(_ onLanguagesLoaded: @escaping ([Swift.String : FleksyKeyboardSDK.LanguageResourceFiles]?) -> Swift.Void)
  public static func availableResources(_ onResourcesLoaded: @escaping ([Swift.String : FleksyKeyboardSDK.LanguageResource]?) -> Swift.Void)
  public static func languageResourceDetails(_ languageCode: Swift.String, _ callback: @escaping (FleksyKeyboardSDK.LanguageResource?) -> Swift.Void)
  public static func deleteLanguage(_ language: Swift.String) -> Swift.String?
  public static func addLanguage(_ keyboardLanguage: FleksyKeyboardSDK.KeyboardLanguage)
  @available(*, deprecated, message: "This method is equivalent to initializing a with no parameters, i.e. LanguageConfiguration()")
  public static func getLanguageConfigurationFromDefaults() -> FleksyKeyboardSDK.LanguageConfiguration
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class AppTextField : UIKit.UITextField {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var inputViewController: UIKit.UIInputViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func insertText(_ text: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var delegate: (any UIKit.UITextFieldDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualAutocapitalizationType: UIKit.UITextAutocapitalizationType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualAutocorrectionType: UIKit.UITextAutocorrectionType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualKeyboardAppearance: UIKit.UIKeyboardAppearance {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualKeyboardType: UIKit.UIKeyboardType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var returnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualReturnKeyType: UIKit.UIReturnKeyType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var smartInsertDeleteType: UIKit.UITextSmartInsertDeleteType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualSmartInsertDeleteType: UIKit.UITextSmartInsertDeleteType {
    get
  }
  @objc deinit
}
public struct LanguageResourceFiles {
  public let language: Swift.String
  public let files: [FleksyKeyboardSDK.LanguageResourceType : FleksyKeyboardSDK.LanguageExternalResource]
  public var dictionary: FleksyKeyboardSDK.LanguageExternalResource? {
    get
  }
  @available(*, deprecated, message: "There are no resources of type .highlights, so this property is always nil")
  public var highlights: FleksyKeyboardSDK.LanguageExternalResource? {
    get
  }
}
public struct LanguageExternalResource {
  public let language: Swift.String
  public let name: Swift.String?
  @available(*, deprecated, message: "Use `versionArray` instead to avoid unexpected values")
  public let version: Swift.Float
  public let versionArray: [Swift.Int]
  public let key: Swift.String
  public let type: FleksyKeyboardSDK.LanguageResourceType?
  @available(*, deprecated, message: "This property is unused and always contains an empty string")
  public let url: Swift.String?
  public let size: Swift.Int?
  public var checksum: Swift.String? {
    get
  }
  public let lastModified: Swift.String?
  public let lastModifiedTimestamp: Foundation.TimeInterval
}
public enum LanguageResourceType : Swift.String, Swift.Codable {
  case dictionary
  case highlights
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers final public class StyleConfiguration {
  public enum KeyboardSize {
    case tiny
    case small
    case original
    case large
    case huge
    public static func == (a: FleksyKeyboardSDK.StyleConfiguration.KeyboardSize, b: FleksyKeyboardSDK.StyleConfiguration.KeyboardSize) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum KeyboardFont {
    case `default`
    case system(weight: UIKit.UIFont.Weight = .regular)
    case custom(fontName: Swift.String)
    case uiFont(UIKit.UIFont)
  }
  final public let keyboardSize: FleksyKeyboardSDK.StyleConfiguration.KeyboardSize
  @available(*, deprecated, message: "Use spacebarLogoImage parameter when initializing the StyleConfiguration object")
  final public var spacebarLogo: Swift.String {
    get
    set
  }
  final public let keyboardFont: FleksyKeyboardSDK.StyleConfiguration.KeyboardFont
  final public var spacebarLogoImage: UIKit.UIImage? {
    get
  }
  @available(*, deprecated, message: "Use spacebarLogoContentMode parameter when initializing the StyleConfiguration object")
  final public var fitSpacebarLogo: Swift.Bool {
    get
    set
  }
  final public var spacebarLogoContentMode: UIKit.UIView.ContentMode {
    get
  }
  final public let spacebarAutoCorrectOffIndicator: Swift.Bool
  final public var spacebarStyle: FleksyKeyboardSDK.enumSpacebarStyle
  final public var dictForceTheme: [Swift.String : Any]
  final public var dictForceDarkTheme: [Swift.String : Any]
  convenience public init(keyboardSize: FleksyKeyboardSDK.StyleConfiguration.KeyboardSize = FleksyManagedSettings.keyboardSize, theme: [Swift.String : Any], withDarkTheme darkTheme: [Swift.String : Any], keyboardFont: FleksyKeyboardSDK.StyleConfiguration.KeyboardFont = FleksyManagedSettings.keyboardFont, spacebarLogoImage: @autoclosure @escaping () -> UIKit.UIImage? = nil, spacebarStyle: FleksyKeyboardSDK.enumSpacebarStyle = .spacebarStyle_Automatic, spacebarLogoContentMode: UIKit.UIView.ContentMode = .center, spacebarAutoCorrectOffIndicator: Swift.Bool = true)
  convenience public init(keyboardSize: FleksyKeyboardSDK.StyleConfiguration.KeyboardSize = FleksyManagedSettings.keyboardSize, theme: FleksyKeyboardSDK.KeyboardTheme = FleksyManagedSettings.lightKeyboardTheme, darkTheme: FleksyKeyboardSDK.KeyboardTheme = FleksyManagedSettings.darkKeyboardTheme, keyboardFont: FleksyKeyboardSDK.StyleConfiguration.KeyboardFont = FleksyManagedSettings.keyboardFont, spacebarLogoImage: @autoclosure @escaping () -> UIKit.UIImage? = nil, spacebarStyle: FleksyKeyboardSDK.enumSpacebarStyle = .spacebarStyle_Automatic, spacebarLogoContentMode: UIKit.UIView.ContentMode = .center, spacebarAutoCorrectOffIndicator: Swift.Bool = true)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class KeyboardConfiguration : ObjectiveC.NSObject, Foundation.NSCopying {
  final public let language: FleksyKeyboardSDK.LanguageConfiguration
  @objc public var customTopBar: Swift.Bool
  @objc public var heightCustomTopBar: Swift.Float
  @available(*, deprecated, message: "This property is ignored by the SDK and does not have any effect")
  @objc public var needsInputMethodSwitch: Swift.Bool
  public var dataCapture: FleksyKeyboardSDK.DataCaptureMode
  public var style: FleksyKeyboardSDK.StyleConfiguration
  @available(*, deprecated, message: "All AppearanceConfiguration APIs are deprecated and ignored")
  @objc public var appearance: FleksyKeyboardSDK.AppearanceConfiguration
  public var typing: FleksyKeyboardSDK.TypingConfiguration
  final public let predictions: FleksyKeyboardSDK.PredictionsConfiguration
  public var emoji: FleksyKeyboardSDK.EmojiConfiguration {
    get
  }
  @available(*, deprecated, message: "To set the emoji configuraton, use KeyboardConfiguration initializer in Swift with the emoji parameter. To get the emoji configuration, use the emoji property")
  public var emojiConfig: FleksyKeyboardSDK.EmojiConfiguration {
    get
    set
  }
  @available(*, deprecated, message: "The SpecialKeysConfiguration API is deprecated and will be removed in a future release. You can use TypingConfiguration's magicButtonAction and magicButtonLongPressActions parameters to fully customize the magic button")
  @objc public var specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration?
  @available(*, deprecated, message: "Use the customizationBundle parameter")
  public var customLayout: FleksyKeyboardSDK.CustomLayoutConfiguration {
    get
    set
  }
  public var customizationBundle: FleksyKeyboardSDK.CustomizationBundleConfiguration {
    get
  }
  @available(*, deprecated, message: "PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  @objc public var panel: FleksyKeyboardSDK.PanelConfiguration
  final public let feedback: FleksyKeyboardSDK.FeedbackConfiguration
  public var apps: FleksyKeyboardSDK.AppsConfiguration {
    get
  }
  @objc public var debugConfig: FleksyKeyboardSDK.DebugConfiguration
  public var license: FleksyKeyboardSDK.LicenseConfiguration {
    get
  }
  public init(language: FleksyKeyboardSDK.LanguageConfiguration = .init(), dataCapture: FleksyKeyboardSDK.DataCaptureMode = .disabled, style: FleksyKeyboardSDK.StyleConfiguration = .init(), typing: FleksyKeyboardSDK.TypingConfiguration = .init(), predictions: FleksyKeyboardSDK.PredictionsConfiguration = .init(), customizationBundle: FleksyKeyboardSDK.CustomizationBundleConfiguration = .init(), emoji: FleksyKeyboardSDK.EmojiConfiguration = .init(), feedback: FleksyKeyboardSDK.FeedbackConfiguration = .init(), apps: FleksyKeyboardSDK.AppsConfiguration = .init(), license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration = .init())
  @available(*, deprecated, renamed: "init", message: "The customLayout parameter label has been renamed to customizationBundle")
  public init(language: FleksyKeyboardSDK.LanguageConfiguration = .init(), dataCapture: FleksyKeyboardSDK.DataCaptureMode = .disabled, style: FleksyKeyboardSDK.StyleConfiguration = .init(), typing: FleksyKeyboardSDK.TypingConfiguration = .init(), predictions: FleksyKeyboardSDK.PredictionsConfiguration = .init(), customLayout: FleksyKeyboardSDK.CustomizationBundleConfiguration, emoji: FleksyKeyboardSDK.EmojiConfiguration = .init(), feedback: FleksyKeyboardSDK.FeedbackConfiguration = .init(), apps: FleksyKeyboardSDK.AppsConfiguration = .init(), license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration = .init())
  @available(*, deprecated, message: "Use an initialization that does not include the `specialKeys` parameter. Use `TypingConfiguration`'s `magicActionLongPressActions` parameter to configure the array of magic buttons")
  convenience public init(language: FleksyKeyboardSDK.LanguageConfiguration = .init(), dataCapture: FleksyKeyboardSDK.DataCaptureMode = .disabled, style: FleksyKeyboardSDK.StyleConfiguration = .init(), typing: FleksyKeyboardSDK.TypingConfiguration = .init(), specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration?, customLayout: FleksyKeyboardSDK.CustomizationBundleConfiguration = .init(), apps: FleksyKeyboardSDK.AppsConfiguration = .init(), license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration = .init())
  @available(*, deprecated, message: "PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  public init(language: FleksyKeyboardSDK.LanguageConfiguration = .init(), panel: FleksyKeyboardSDK.PanelConfiguration, dataCapture: FleksyKeyboardSDK.DataCaptureMode = .disabled, style: FleksyKeyboardSDK.StyleConfiguration = .init(), typing: FleksyKeyboardSDK.TypingConfiguration = .init(), predictions: FleksyKeyboardSDK.PredictionsConfiguration = .init(), specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration? = nil, customLayout: FleksyKeyboardSDK.CustomizationBundleConfiguration = .init(), feedback: FleksyKeyboardSDK.FeedbackConfiguration = .init(), apps: FleksyKeyboardSDK.AppsConfiguration = .init(), license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration = .init())
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored. Use an initialization that uses the `dataCapture` parameter")
  convenience public init(panel: FleksyKeyboardSDK.PanelConfiguration = .init(), capture: FleksyKeyboardSDK.CaptureConfiguration = .init(), style: FleksyKeyboardSDK.StyleConfiguration = .init(), appearance: FleksyKeyboardSDK.AppearanceConfiguration, typing: FleksyKeyboardSDK.TypingConfiguration = .init(), specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration? = nil, apps: FleksyKeyboardSDK.AppsConfiguration = .init(), license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration = .init())
  @available(*, deprecated, message: "Use an initialization that uses the `dataCapture` parameter")
  convenience public init(panel: FleksyKeyboardSDK.PanelConfiguration = .init(), capture: FleksyKeyboardSDK.CaptureConfiguration, style: FleksyKeyboardSDK.StyleConfiguration = .init(), typing: FleksyKeyboardSDK.TypingConfiguration = .init(), specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration? = nil, apps: FleksyKeyboardSDK.AppsConfiguration = .init(), license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration = .init())
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  convenience public init(panel: FleksyKeyboardSDK.PanelConfiguration?, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration?, license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that uses the `dataCapture` parameter. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  public init(panel: FleksyKeyboardSDK.PanelConfiguration?, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration?, license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored")
  convenience public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that does not include the `customView` and `heightCustom` parameters. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfiguration, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration")
  convenience public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfiguration)
  @available(*, deprecated, message: "Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration")
  convenience public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfiguration)
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration")
  convenience public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, license: FleksyKeyboardSDK.LicenseConfiguration)
  @available(*, deprecated, message: "Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration")
  convenience public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfiguration?, license: FleksyKeyboardSDK.LicenseConfiguration)
  @objc public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc deinit
}
public enum EventBasedDataCaptureEvent : Swift.Codable {
  case keyStroke(FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke)
  case delete(FleksyKeyboardSDK.EventBasedDataCaptureEvent.Delete)
  case keyPlane(FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyPlane)
  case word(FleksyKeyboardSDK.EventBasedDataCaptureEvent.Word)
  case swipe(FleksyKeyboardSDK.EventBasedDataCaptureEvent.Swipe)
  case sessionUpdate(FleksyKeyboardSDK.EventBasedDataCaptureEvent.SessionUpdate)
  case stressUpdate(FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate)
  public struct KeyStroke : Swift.Codable {
    public enum KeyType : Swift.Codable {
      case alphanumeric
      case punctuation
      case spacebar
      case backspace
      case enter
      case modifierKey
      case shift
      case autoShift
      case autoToggleNumbers
      case toggleEmojis
      case prediction
      case suggestion
      case other
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyType, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum KeyArea : Swift.Codable {
      case undefined
      case qwasz
      case erdfxc
      case tygv
      case uihjbn
      case opklm
      case suggestionBar
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyArea, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyArea) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let pressTime: Swift.Int64
    public let releaseTime: Swift.Int64
    public let keyType: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyType
    public let keyText: Swift.String
    public let keyArea: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyArea
    public let keyCode: Swift.UInt
    public let keyPressBegin: CoreFoundation.CGPoint
    public let keyPressEnd: CoreFoundation.CGPoint
    public let keyCenter: CoreFoundation.CGPoint
    public let keyRectangle: CoreFoundation.CGRect
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Delete : Swift.Codable {
    public enum DeleteDataType : Swift.Codable {
      case deleteCharacter
      case deleteSpace
      case undoAC
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.Delete.DeleteDataType, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.Delete.DeleteDataType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let word: Swift.String
    public let deleteCharacter: Swift.String
    public let typeDelete: FleksyKeyboardSDK.EventBasedDataCaptureEvent.Delete.DeleteDataType
    public let timestamp: Swift.Int64
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct KeyPlane : Swift.Codable {
    public enum KeyboardPlaneType : Swift.Codable {
      case qwertyLower
      case qwertyUpper
      case numbers
      case symbols
      case qwertyAC_OffLower
      case emojis
      case numberPad
      case numberPadSymbols
      case shift1
      case shift2
      case shift3
      case numbers_iOS
      case symbols_iOS
      case temp
      case numbersMini
      case qwertyAC_OffUpper
      case twitterLower
      case twitterUpper
      case urlLower
      case urlUpper
      case phonePad
      case phonePadSymbols
      case emailLower
      case emailUpper
      case invalid
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyPlane.KeyboardPlaneType, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyPlane.KeyboardPlaneType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Key : Swift.Codable {
      public let center: CoreFoundation.CGPoint
      public let rectangle: CoreFoundation.CGRect
      public let label: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let keyPlaneId: FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyPlane.KeyboardPlaneType
    public let keys: [FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyPlane.Key]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Word : Swift.Codable {
    public enum AutocorrectionType : Swift.Codable {
      case none
      case missedSpace
      case mistypedSpace
      case eliminated
      case transpositioning
      case missingTap
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.Word.AutocorrectionType, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.Word.AutocorrectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let originalWord: Swift.String
    public let word: Swift.String
    public let timestamp: Swift.Int64
    public let autocorrectionType: FleksyKeyboardSDK.EventBasedDataCaptureEvent.Word.AutocorrectionType
    public let autocorrectionNumber: Swift.Int64
    public let isAutoCorrectedWord: Swift.Int
    public let isPredictedWord: Swift.Int
    public let isSwipeWord: Swift.Int
    public let uniP: Swift.Double
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct Swipe : Swift.Codable {
    public struct Feature : Swift.Codable {
      public let point: CoreFoundation.CGPoint
      public let timestamp: Swift.UInt64
      public let label: Swift.String
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public struct Candidate : Swift.Codable {
      public let candidate: Swift.String
      public let shapeProb: Swift.Double
      public let finalProb: Swift.Double
      public func encode(to encoder: any Swift.Encoder) throws
      public init(from decoder: any Swift.Decoder) throws
    }
    public let context: Swift.String
    public let features: [FleksyKeyboardSDK.EventBasedDataCaptureEvent.Swipe.Feature]
    public var candidate: Swift.String {
      get
    }
    public let word: Swift.String
    public let selectedSuggestion: Swift.String
    public let layout: Swift.String
    public let timestamp: Swift.UInt64
    public let candidates: [FleksyKeyboardSDK.EventBasedDataCaptureEvent.Swipe.Candidate]
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct SessionUpdate : Swift.Codable {
    public enum TextFieldType : Swift.Codable {
      case regularText
      case url
      case emailAddress
      case numbers
      case twitter
      case websearch
      case undefined
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.SessionUpdate.TextFieldType, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.SessionUpdate.TextFieldType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let timeZone: Swift.Double
    public let layout: Swift.String
    public let textField: FleksyKeyboardSDK.EventBasedDataCaptureEvent.SessionUpdate.TextFieldType
    public let language: Swift.String
    public let languageVersion: Swift.String
    public let appContext: Swift.String
    public let schemaVersion: Swift.String
    public let keyboardAreaWidth: Swift.Int
    public let keyboardAreaHeight: Swift.Int
    public let screenWidthMm: Swift.Double
    public let screenHeightMm: Swift.Double
    public let screenWidthPx: Swift.Int
    public let screenHeightPx: Swift.Int
    public let startTimestamp: Swift.Int64
    public let endTimestamp: Swift.Int64
    public let sessionText: Swift.String
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public struct StressUpdate : Swift.Codable {
    public enum Status : Swift.Codable {
      case stressDetected
      case noStressDetected
      case stressUndefined
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Status, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Status) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public enum Regime : Swift.Codable {
      case training
      case inference
      public static func == (a: FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Regime, b: FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Regime) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public func encode(to encoder: any Swift.Encoder) throws
      public var hashValue: Swift.Int {
        get
      }
      public init(from decoder: any Swift.Decoder) throws
    }
    public let stress: FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Status
    public let regime: FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Regime
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class FleksyManagedSettings {
  public static var userLanguages: [FleksyKeyboardSDK.KeyboardLanguage] {
    get
    set
  }
  public static var keyboardSize: FleksyKeyboardSDK.StyleConfiguration.KeyboardSize {
    get
    set
  }
  public static var lightKeyboardTheme: FleksyKeyboardSDK.KeyboardTheme {
    get
    set
  }
  public static var darkKeyboardTheme: FleksyKeyboardSDK.KeyboardTheme {
    get
    set
  }
  public static var keyboardFont: FleksyKeyboardSDK.StyleConfiguration.KeyboardFont {
    get
    set
  }
  public static var caseSensitive: Swift.Bool {
    get
    set
  }
  public static var smartPunctuation: Swift.Bool {
    get
    set
  }
  public static var autoCorrection: Swift.Bool {
    get
    set
  }
  public static var autoCapitalization: Swift.Bool {
    get
    set
  }
  public static var autoLearn: Swift.Bool {
    get
    set
  }
  public static var doubleSpaceTapAddsPunctuation: Swift.Bool {
    get
    set
  }
  public static var magicButtonAction: FleksyKeyboardSDK.MagicButtonAction {
    get
    set
  }
  public static var magicButtonLongPressActions: [FleksyKeyboardSDK.MagicButtonAction] {
    get
    set
  }
  public static var isMinimal: Swift.Bool {
    get
    set
  }
  public static var backspaceToUndoAutoCorrection: Swift.Bool {
    get
    set
  }
  public static var swipeTyping: Swift.Bool {
    get
    set
  }
  public static var swipeTriggerLength: CoreFoundation.CGFloat {
    get
    set
  }
  public static var punctuationSymbols: [Swift.String] {
    get
    set
  }
  public static var useAllAccents: Swift.Bool {
    get
    set
  }
  public static var longPressShowsPunctuation: Swift.Bool {
    get
    set
  }
  public static var swipeLeftToDelete: Swift.Bool {
    get
    set
  }
  public static var autoCorrectAfterPunctuation: Swift.Bool {
    get
    set
  }
  public static var keitaiEnabled: Swift.Bool {
    get
    set
  }
  public static var keitaiDelay: Foundation.TimeInterval {
    get
    set
  }
  public static var spacebarMovesCursor: Swift.Bool {
    get
    set
  }
  public static var numberRow: Swift.Bool {
    get
    set
  }
  public static var wordPredictions: Swift.Bool {
    get
    set
  }
  public static var emojiPredictions: Swift.Bool {
    get
    set
  }
  public static var recentEmojis: [Swift.String] {
    get
    @available(*, deprecated, message: "The internal structure of recentEmoji has changed and is now fully managed by FleksySDK. Setting this property removes the internal logic of the FleksySDK for keeping the recent emojis up-to-date based on the user's usage of the emojis.")
    set
  }
  public static var defaultEmojiSkinTone: FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone {
    get
    set
  }
  public static var soundMode: FleksyKeyboardSDK.FeedbackConfiguration.SoundMode {
    get
    set
  }
  public static var haptics: Swift.Bool {
    get
    set
  }
  public static var storeLogs: Swift.Bool {
    get
    set
  }
  public static var logsDirectory: Foundation.URL {
    get
  }
  public static var showAppsInCarousel: Swift.Bool {
    get
    set
  }
  @objc deinit
}
public struct EmojiConfiguration {
  public enum EmojiSkinTone {
    case neutral
    case light
    case mediumLight
    case medium
    case mediumDark
    case dark
    public static func == (a: FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone, b: FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let recent: [Swift.String]
  public let emojiSearch: Swift.Bool
  public var defaultSkinTone: FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone {
    get
  }
  @available(*, deprecated, message: "Use defaultSkinTone property instead")
  public var emojiSkinTone: FleksyKeyboardSDK.enumEmojiSkinTone {
    get
    set
  }
  public init(recent: [Swift.String] = [], defaultSkinTone: FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone = FleksyManagedSettings.defaultEmojiSkinTone, emojiSearch: Swift.Bool = true)
  @available(*, deprecated, message: "Use initializer with defaultSkinTone parameter instead")
  public init(skinTone: FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone)
}
@objc extension FleksyKeyboardSDK.FleksyUtility {
  @objc dynamic public class func isExtension() -> Swift.Bool
}
extension FleksyKeyboardSDK.FleksyUtility {
  @_spi(Fleksy) public static func getStoredDefaultIdentifier() -> Swift.String
}
public enum DataCaptureMode {
  case disabled
  case eventBased(configuration: FleksyKeyboardSDK.EventDataConfiguration = .init())
  case sessionBased(output: FleksyKeyboardSDK.enumCaptureOutput = .captureOutput_file, configuration: FleksyKeyboardSDK.FLDataConfiguration = .init(), logEvents: Swift.Bool = false)
}
public struct EventDataConfiguration : Swift.Codable {
  public let keyStroke: Swift.Bool
  public let delete: Swift.Bool
  public let keyPlane: Swift.Bool
  public let word: Swift.Bool
  public let swipe: Swift.Bool
  public let sessionUpdate: Swift.Bool
  public var stressMonitor: Swift.Bool {
    get
  }
  public init(keyStroke: Swift.Bool = true, delete: Swift.Bool = true, keyPlane: Swift.Bool = false, word: Swift.Bool = true, swipe: Swift.Bool = true, sessionUpdate: Swift.Bool = true, stressMonitor: Swift.Bool = true)
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PredictionsConfiguration {
  public let wordPredictions: Swift.Bool
  public let emojiPredictions: Swift.Bool
  public init(wordPredictions: Swift.Bool = FleksyManagedSettings.wordPredictions, emojiPredictions: Swift.Bool = FleksyManagedSettings.emojiPredictions)
}
public struct LicenseConfiguration {
  public let licenseKey: Swift.String
  public let licenseSecret: Swift.String
  public init(licenseKey: Swift.String, licenseSecret: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) open class AppTextView : UIKit.UITextView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var inputViewController: UIKit.UIInputViewController? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToSuperview()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMoveToWindow()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var delegate: (any UIKit.UITextViewDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualAutocapitalizationType: UIKit.UITextAutocapitalizationType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualAutocorrectionType: UIKit.UITextAutocorrectionType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualKeyboardAppearance: UIKit.UIKeyboardAppearance {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var keyboardType: UIKit.UIKeyboardType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualKeyboardType: UIKit.UIKeyboardType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var returnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualReturnKeyType: UIKit.UIReturnKeyType {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var smartInsertDeleteType: UIKit.UITextSmartInsertDeleteType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var actualSmartInsertDeleteType: UIKit.UITextSmartInsertDeleteType {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class FKInterfaceInputViewController : ObjectiveC.NSObject, FleksyKeyboardSDK.FKInterfaceProtocol {
  @objc public var theme: FleksyKeyboardSDK.FleksyTheme? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Subclass FKKeyboardViewController to integrate the SDK")
  @objc @_Concurrency.MainActor convenience public init(with inputView: FleksyKeyboardSDK.FKInputView, view: UIKit.UIView, textDocumentProxy: any UIKit.UITextDocumentProxy, trailCollection: UIKit.UITraitCollection, protocol inputController: any UIKit.UIInputViewController & FleksyKeyboardSDK.FKInterfaceInputViewControllerDelegate)
  @available(*, deprecated, message: "Subclass FKKeyboardViewController to integrate the SDK")
  @objc @_Concurrency.MainActor convenience public init(with inputView: FleksyKeyboardSDK.FKInputView, textDocumentProxy: any UIKit.UITextDocumentProxy, trailCollection: UIKit.UITraitCollection, protocol inputController: any UIKit.UIInputViewController & FleksyKeyboardSDK.FKInterfaceInputViewControllerDelegate, configuration: FleksyKeyboardSDK.KeyboardConfiguration)
  @available(*, deprecated, message: "Subclass FKKeyboardViewController to integrate the SDK")
  @objc @_Concurrency.MainActor convenience public init(with inputView: FleksyKeyboardSDK.FKInputView, textDocumentProxy: any UIKit.UITextDocumentProxy, trailCollection: UIKit.UITraitCollection, protocol inputController: any UIKit.UIInputViewController & FleksyKeyboardSDK.FKInterfaceInputViewControllerDelegate, output: (any FleksyKeyboardSDK.FKDataCollection)?, configuration: FleksyKeyboardSDK.KeyboardConfiguration, appIcon: UIKit.UIImage?)
  @available(*, deprecated, message: "Subclass FKKeyboardViewController to integrate the SDK")
  @objc @_Concurrency.MainActor convenience public init(with inputView: FleksyKeyboardSDK.FKInputView, textDocumentProxy: any UIKit.UITextDocumentProxy, trailCollection: UIKit.UITraitCollection, protocol inputController: any UIKit.UIInputViewController & FleksyKeyboardSDK.FKInterfaceInputViewControllerDelegate, output: (any FleksyKeyboardSDK.FKDataCollection)?, configuration: FleksyKeyboardSDK.KeyboardConfiguration?)
  @objc deinit
  public var isInLandscape: Swift.Bool {
    get
  }
  @objc public var keypadFont: UIKit.UIFont? {
    @objc get
  }
  @objc public var lowercaseKeysFont: UIKit.UIFont? {
    @objc get
  }
  @objc public func setInterfaceDelegate(_ interfaceDelegate: any FleksyKeyboardSDK.FKInterfaceDelegate)
  @objc public func insertText(_ text: Swift.String)
  @objc public func replaceText(_ text: Swift.String, in range: Foundation.NSRange)
  @objc public func replaceAllText(with text: Swift.String)
  @objc public func deleteBackward()
  @objc public func deleteBackwardWord()
  @objc public func insertWordPrediction(_ prediction: Swift.String, with type: FleksyKeyboardSDK.WordPredictionType)
  @objc public func updateFlaggedWordsFile(_ filePath: Swift.String, forLanguage language: Swift.String)
  @objc public func enableCollectionActions(_ value: Swift.Bool, collectionText text: Swift.Bool)
  @objc public func loadCollectionActions(_ capture: FleksyKeyboardSDK.CaptureConfiguration)
  @objc public func enableEncryption(withKey key: Swift.String)
  @objc public func subscribeEventBus(_ arrayEvents: [Swift.String])
  @objc public func getPanelCustomTopbarView() -> UIKit.UIView?
  @_Concurrency.MainActor @objc public func reloadTheme(_ theme: [Swift.AnyHashable : Any]) -> Swift.Bool
  @objc public func changeLanguage(to languageCode: Swift.String, layout: Swift.String) -> Swift.Bool
  @objc public func updateKeyboardInsets(_ insets: UIKit.UIEdgeInsets)
  @objc public func addWordUserDictionary(_ word: Swift.String)
  @objc public func listWordUserDictionary() -> [Swift.String]
  @objc public func removeWordUserDictionary(_ word: Swift.String)
  @objc public func removeAllWordsUserDictionary()
  @objc public func deleteAutolearnDictionary()
  @objc public func reloadSettings()
  @objc public func reload(_ configuration: FleksyKeyboardSDK.KeyboardDynamicConfiguration)
  @objc public func addCustomCollectedData(_ dict: [Swift.AnyHashable : Any])
  @objc public func flushCollectedData()
  @objc public func debugFlushRestartTypingSession()
  @objc public func debugSend(_ point: CoreFoundation.CGPoint, end endPoint: CoreFoundation.CGPoint, diff time: Foundation.TimeInterval)
  @objc public func debugSendPrediction(_ point: CoreFoundation.CGPoint, end endPoint: CoreFoundation.CGPoint, diff time: Foundation.TimeInterval)
  @objc public var activationStatus: Swift.Int {
    @objc get
  }
  @objc public var licenseCapabilities: Swift.Set<Foundation.NSNumber> {
    @objc get
  }
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController : FleksyKeyboardSDK.FleksyCursorControllable {
  @objc dynamic public var isShowingCursorControl: Swift.Bool {
    @objc get
    @objc set
  }
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController {
  @objc dynamic public var extensionKeysFont: UIKit.UIFont? {
    @objc get
  }
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController : FleksyKeyboardSDK.FleksyThemeableUI {
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController {
  @objc dynamic public var isJapanese: Swift.Bool {
    @objc get
  }
  @objc dynamic public var isFlickKeyboard: Swift.Bool {
    @objc get
  }
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController : FleksyKeyboardSDK.FleksyCursorControlDelegate {
  @objc dynamic public var keyboardContainerHeight: CoreFoundation.CGFloat {
    @objc get
  }
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController {
  public func playTapFeedback()
  public func playButtonFeedback()
  public func playBackspaceFeedback()
  @objc dynamic public func pullDownGesture(withOffset offset: CoreFoundation.CGFloat, view: UIKit.UIView!, presentedViewController controller: UIKit.UIViewController!)
  @objc dynamic public func pullDownGestureEnded(withOffset offset: CoreFoundation.CGFloat, velocity verticalVelocity: CoreFoundation.CGFloat, view: UIKit.UIView!, presentedViewController controller: UIKit.UIViewController!)
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController {
  @objc @_Concurrency.MainActor dynamic public func textWillChange(_ textInput: (any UIKit.UITextInput)?)
  @objc @_Concurrency.MainActor dynamic public func textDidChange(_ textInput: (any UIKit.UITextInput)?)
  @objc dynamic public func selectionWillChange(_ textInput: (any UIKit.UITextInput)?)
  @objc dynamic public func selectionDidChange(_ textInput: (any UIKit.UITextInput)?)
}
extension FleksyKeyboardSDK.FKInterfaceInputViewController : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
extension FleksyKeyboardSDK.KeyboardID : Swift.Hashable {
}
extension FleksyKeyboardSDK.FLDataConfiguration {
  convenience public init(text: Swift.Bool = true, swipe: Swift.Bool = true, emoji: Swift.Bool = true, layout: Swift.Bool = true, textField: Swift.Bool = true, language: Swift.Bool = true, type: Swift.Bool = true, area: Swift.Bool = true, code: Swift.Bool = true, position: Swift.Bool = true, press: Swift.Bool = true, keyPress: Swift.Bool = true, keyCenter: Swift.Bool = true, keyBounds: Swift.Bool = true, configCoordinate: FleksyKeyboardSDK.enumDataConfigCoordinate = .dataConfigCoordinate_screenPixel, word: Swift.Bool = true, delete: Swift.Bool = true, keyPlane: Swift.Bool = true, keyText: Swift.Bool = true, positionEnd: Swift.Bool = true, keyPressEnd: Swift.Bool = true, predictionsTouch: Swift.Bool = true, prediction: Swift.Bool = true, configFormat: FleksyKeyboardSDK.enumDataConfigFormat = .dataConfigFormat_groupByTap, accelerometer: Swift.Bool = false, autocorrection: Swift.Bool = true, distanceFromLastTouch: Swift.Bool = false, keyPositionLimited: Swift.Bool = false, autocorrectionLimited: Swift.Bool = false, wordLimited: Swift.Bool = false, predictionLimited: Swift.Bool = false, swipeLimited: Swift.Bool = false, deleteLimited: Swift.Bool = false, stressMonitor: Swift.Bool = false, interKeyTimeHistogram: Swift.Bool = true, interKeyTimeHistogramInterval: Swift.Int = 50, interKeyTimeHistogramCount: Swift.Int = 21)
}
public struct FeedbackConfiguration : Swift.Equatable {
  public struct ResourceSoundSet : Swift.Equatable, Swift.Codable {
    public let tap: Swift.String
    public let button: Swift.String
    public let backspace: Swift.String
    public static var defaultSoundSet: FleksyKeyboardSDK.FeedbackConfiguration.ResourceSoundSet {
      get
    }
    public init(tap: Swift.String, button: Swift.String? = nil, backspace: Swift.String? = nil)
    public static func == (a: FleksyKeyboardSDK.FeedbackConfiguration.ResourceSoundSet, b: FleksyKeyboardSDK.FeedbackConfiguration.ResourceSoundSet) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public enum SoundMode : Swift.Equatable, Swift.Codable {
    case silent
    case sound(_: FleksyKeyboardSDK.FeedbackConfiguration.ResourceSoundSet = .defaultSoundSet)
    public static func == (a: FleksyKeyboardSDK.FeedbackConfiguration.SoundMode, b: FleksyKeyboardSDK.FeedbackConfiguration.SoundMode) -> Swift.Bool
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public let soundMode: FleksyKeyboardSDK.FeedbackConfiguration.SoundMode
  public let haptics: Swift.Bool
  public init(soundMode: FleksyKeyboardSDK.FeedbackConfiguration.SoundMode = FleksyManagedSettings.soundMode, haptics: Swift.Bool = FleksyManagedSettings.haptics)
  public static func == (a: FleksyKeyboardSDK.FeedbackConfiguration, b: FleksyKeyboardSDK.FeedbackConfiguration) -> Swift.Bool
}
public struct LanguageConfiguration {
  public let current: FleksyKeyboardSDK.KeyboardLanguage
  public let userLanguages: [FleksyKeyboardSDK.KeyboardLanguage]
  public let automaticDownload: Swift.Bool
  public init(current: FleksyKeyboardSDK.KeyboardLanguage? = nil, userLanguages: [FleksyKeyboardSDK.KeyboardLanguage] = FleksyManagedSettings.userLanguages, automaticDownload: Swift.Bool = true)
}
public protocol DataCaptureEventDelegate : AnyObject {
  func onDataCaptureEvent(_ event: FleksyKeyboardSDK.EventBasedDataCaptureEvent)
}
@_inheritsConvenienceInitializers @objc(FKKeyboardViewControllerSwift) @_Concurrency.MainActor(unsafe) open class FKKeyboardViewController : UIKit.UIInputViewController, FleksyKeyboardSDK.FKInterfaceInputViewControllerDelegate, FleksyKeyboardSDK.DataCaptureEventDelegate {
  @objc @_Concurrency.MainActor(unsafe) public var interface: (any FleksyKeyboardSDK.FKInterfaceProtocol)! {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) final public let eventBus: FleksyKeyboardSDK.EventBus
  @_Concurrency.MainActor(unsafe) public var activationStatus: FleksyKeyboardSDK.KeyboardActivationStatus {
    get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didMove(toParent parent: UIKit.UIViewController?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textWillChange(_ textInput: (any UIKit.UITextInput)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func textDidChange(_ textInput: (any UIKit.UITextInput)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func selectionDidChange(_ textInput: (any UIKit.UITextInput)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func selectionWillChange(_ textInput: (any UIKit.UITextInput)?)
  @_Concurrency.MainActor(unsafe) public var activeAppId: Swift.String? {
    get
  }
  @_Concurrency.MainActor(unsafe) public var currentAppViewMode: FleksyAppsCore.KeyboardAppViewMode? {
    get
  }
  @_Concurrency.MainActor public func openApp(appId: Swift.String, animated: Swift.Bool = false)
  @_Concurrency.MainActor public func closeActiveApp(animated: Swift.Bool = false)
  @_Concurrency.MainActor public func reloadConfiguration()
  @available(iOS 15, *)
  @_Concurrency.MainActor public func openEmojiSearch()
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor(unsafe) public func readFullDocumentContext() async throws -> FleksyKeyboardSDK.FullDocumentContext
  #endif
  @_Concurrency.MainActor(unsafe) open func createConfiguration() -> FleksyKeyboardSDK.KeyboardConfiguration
  @_Concurrency.MainActor(unsafe) @objc open var appIcon: UIKit.UIImage? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var leadingTopBarView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc open var trailingTopBarView: UIKit.UIView? {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public var keyboardFrame: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor(unsafe) public var topBarHeight: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) public var bottomKeyboardOffset: CoreFoundation.CGFloat {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc open func addKeyboardViewController(_ currentKeyboardVC: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc open func addDisplayedViewController(_ displayVC: any UIKit.UIViewController & FleksyKeyboardSDK.FleksyThemeableUI)
  @_Concurrency.MainActor(unsafe) @objc open func addExtensionsViewController(_ extensionsVC: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc open func dismissKeyboardButton()
  @_Concurrency.MainActor(unsafe) @objc open func changeKeyboardButton()
  @_Concurrency.MainActor(unsafe) @objc open func onKeyboardFrameChanged()
  @_Concurrency.MainActor(unsafe) @objc dynamic open func eventBus(_ event: Swift.String, payload dictPayload: [Swift.AnyHashable : Any]?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func sessionStarted(_ sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func sessionEnded(_ sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func dataCollection(_ data: Swift.String, sessionId: Swift.String)
  @available(*, deprecated, renamed: "dataCollection(_:sessionId:)")
  @_Concurrency.MainActor(unsafe) @objc dynamic open func dataCollection(_ data: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func dataCollectionFormatDict(_ data: [Swift.AnyHashable : Any], sessionId: Swift.String)
  @available(*, deprecated, renamed: "dataCollectionFormatDict(_:sessionId:)")
  @_Concurrency.MainActor(unsafe) @objc dynamic open func dataCollectionFormatDict(_ data: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func dataCollectionStored(_ path: Swift.String, sessionId: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func reportAnalytics(_ data: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func onLayoutChanges(_ dictLayout: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func updateKeyboardAppsTextDocumentProxy(_ documentProxy: (any UIKit.UITextDocumentProxy)?)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func contextPropertiesChanged(_ properties: FleksyKeyboardSDK.KeyboardProperties)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func triggerOpenApp()
  @_Concurrency.MainActor(unsafe) open func onDataCaptureEvent(_ event: FleksyKeyboardSDK.EventBasedDataCaptureEvent)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct KeyboardTheme {
  public let key: Swift.String
  public let name: Swift.String
  public var background: UIKit.UIColor {
    get
  }
  public let backgroundGradient: [UIKit.UIColor]
  public let image: Swift.String?
  public let imageAlpha: Swift.Double
  public let imagePosition: FleksyKeyboardSDK.KeyboardTheme.ImagePosition
  public let keyLetters: UIKit.UIColor
  public let keyBackground: UIKit.UIColor?
  public let keyBackgroundPressed: UIKit.UIColor?
  public let keyShadow: UIKit.UIColor?
  public let hoverLetters: UIKit.UIColor
  public let hoverBackground: UIKit.UIColor
  public let hoverSelectedLetters: UIKit.UIColor
  public let hoverSelectedBackground: UIKit.UIColor
  public let suggestionLetters: UIKit.UIColor
  public let suggestionBackground: UIKit.UIColor?
  public let suggestionSelectedLetters: UIKit.UIColor
  public let suggestionSelectedBackground: UIKit.UIColor?
  public let buttonLetters: UIKit.UIColor
  public let buttonBackground: UIKit.UIColor?
  public let buttonBackgroundPressed: UIKit.UIColor
  public let buttonActionLetters: UIKit.UIColor
  public let buttonActionBackground: UIKit.UIColor?
  public let buttonActionBackgroundPressed: UIKit.UIColor
  public let buttonShiftLetters: UIKit.UIColor
  public let buttonShiftBackground: UIKit.UIColor?
  public let buttonShiftBackgroundPressed: UIKit.UIColor
  public let buttonBackspaceLetters: UIKit.UIColor
  public let buttonBackspaceBackground: UIKit.UIColor?
  public let buttonBackspaceBackgroundPressed: UIKit.UIColor
  public let spacebarLetters: UIKit.UIColor
  public let spacebarBackground: UIKit.UIColor?
  public let spacebarBackgroundPressed: UIKit.UIColor
  @available(*, deprecated, message: "Unused. There's no home row in the keyboard anymore")
  public let homeBackground: UIKit.UIColor?
  public let swipeLine: UIKit.UIColor
  public let trackPadCursor: UIKit.UIColor
  public let tileIcons: [Swift.String]?
  public let extras: FleksyKeyboardSDK.KeyboardTheme.ThemeExtras
  public let sounds: FleksyKeyboardSDK.KeyboardTheme.ThemeSounds?
  public init(key: Swift.String, name: Swift.String? = nil, backgroundGradient: [UIKit.UIColor] = [.clear], image: Swift.String? = nil, imageAlpha: CoreFoundation.CGFloat = 1, imagePosition: FleksyKeyboardSDK.KeyboardTheme.ImagePosition = .scale, keyLetters: UIKit.UIColor = .black, keyBackground: UIKit.UIColor? = nil, keyBackgroundPressed: UIKit.UIColor? = nil, keyShadow: UIKit.UIColor? = nil, hoverLetters: UIKit.UIColor? = nil, hoverBackground: UIKit.UIColor? = nil, hoverSelectedLetters: UIKit.UIColor? = nil, hoverSelectedBackground: UIKit.UIColor? = nil, suggestionLetters: UIKit.UIColor? = nil, suggestionBackground: UIKit.UIColor? = nil, suggestionSelectedLetters: UIKit.UIColor? = nil, suggestionSelectedBackground: UIKit.UIColor? = nil, buttonLetters: UIKit.UIColor? = nil, buttonBackground: UIKit.UIColor? = nil, buttonBackgroundPressed: UIKit.UIColor? = nil, buttonActionLetters: UIKit.UIColor? = nil, buttonActionBackground: UIKit.UIColor? = nil, buttonActionBackgroundPressed: UIKit.UIColor? = nil, buttonShiftLetters: UIKit.UIColor? = nil, buttonShiftBackground: UIKit.UIColor? = nil, buttonShiftBackgroundPressed: UIKit.UIColor? = nil, buttonBackspaceLetters: UIKit.UIColor? = nil, buttonBackspaceBackground: UIKit.UIColor? = nil, buttonBackspaceBackgroundPressed: UIKit.UIColor? = nil, spacebarLetters: UIKit.UIColor? = nil, spacebarBackground: UIKit.UIColor? = nil, spacebarBackgroundPressed: UIKit.UIColor? = nil, swipeLine: UIKit.UIColor? = nil, trackPadCursor: UIKit.UIColor? = nil, tileIcons: [Swift.String]? = nil, extras: FleksyKeyboardSDK.KeyboardTheme.ThemeExtras = ThemeExtras(), sounds: FleksyKeyboardSDK.KeyboardTheme.ThemeSounds? = nil)
  @available(*, deprecated, message: "Use the initializer without the homeBackground parameter. homeBackground is deprecated")
  public init(key: Swift.String, name: Swift.String? = nil, backgroundGradient: [UIKit.UIColor] = [.clear], image: Swift.String? = nil, imageAlpha: CoreFoundation.CGFloat = 1, imagePosition: FleksyKeyboardSDK.KeyboardTheme.ImagePosition = .scale, keyLetters: UIKit.UIColor = .black, keyBackground: UIKit.UIColor? = nil, keyBackgroundPressed: UIKit.UIColor? = nil, keyShadow: UIKit.UIColor? = nil, hoverLetters: UIKit.UIColor? = nil, hoverBackground: UIKit.UIColor? = nil, hoverSelectedLetters: UIKit.UIColor? = nil, hoverSelectedBackground: UIKit.UIColor? = nil, suggestionLetters: UIKit.UIColor? = nil, suggestionBackground: UIKit.UIColor? = nil, suggestionSelectedLetters: UIKit.UIColor? = nil, suggestionSelectedBackground: UIKit.UIColor? = nil, buttonLetters: UIKit.UIColor? = nil, buttonBackground: UIKit.UIColor? = nil, buttonBackgroundPressed: UIKit.UIColor? = nil, buttonActionLetters: UIKit.UIColor? = nil, buttonActionBackground: UIKit.UIColor? = nil, buttonActionBackgroundPressed: UIKit.UIColor? = nil, buttonShiftLetters: UIKit.UIColor? = nil, buttonShiftBackground: UIKit.UIColor? = nil, buttonShiftBackgroundPressed: UIKit.UIColor? = nil, buttonBackspaceLetters: UIKit.UIColor? = nil, buttonBackspaceBackground: UIKit.UIColor? = nil, buttonBackspaceBackgroundPressed: UIKit.UIColor? = nil, spacebarLetters: UIKit.UIColor? = nil, spacebarBackground: UIKit.UIColor? = nil, spacebarBackgroundPressed: UIKit.UIColor? = nil, homeBackground: UIKit.UIColor?, swipeLine: UIKit.UIColor? = nil, trackPadCursor: UIKit.UIColor? = nil, tileIcons: [Swift.String]? = nil, extras: FleksyKeyboardSDK.KeyboardTheme.ThemeExtras = ThemeExtras(), sounds: FleksyKeyboardSDK.KeyboardTheme.ThemeSounds? = nil)
  public init(key: Swift.String, name: Swift.String? = nil, backgroundGradient: [UIKit.UIColor] = [.clear], image: Swift.String? = nil, imageAlpha: CoreFoundation.CGFloat = 1, imagePosition: FleksyKeyboardSDK.KeyboardTheme.ImagePosition = .scale, defaultForeground: UIKit.UIColor = .black, defaultBackground: UIKit.UIColor? = nil, keyShadow: UIKit.UIColor? = nil, suggestionBackground: UIKit.UIColor? = nil, suggestionSelectedBackground: UIKit.UIColor? = nil, tileIcons: [Swift.String]? = nil, extras: FleksyKeyboardSDK.KeyboardTheme.ThemeExtras = ThemeExtras(), sounds: FleksyKeyboardSDK.KeyboardTheme.ThemeSounds? = nil)
  public init?(jsonString: Swift.String)
  @available(*, deprecated, message: "Use the initializer without the homeBackground parameter. homeBackground is deprecated")
  public init(key: Swift.String, name: Swift.String? = nil, backgroundGradient: [UIKit.UIColor] = [.clear], image: Swift.String? = nil, imageAlpha: CoreFoundation.CGFloat = 1, imagePosition: FleksyKeyboardSDK.KeyboardTheme.ImagePosition = .scale, defaultForeground: UIKit.UIColor = .black, defaultBackground: UIKit.UIColor? = nil, keyShadow: UIKit.UIColor? = nil, suggestionBackground: UIKit.UIColor? = nil, suggestionSelectedBackground: UIKit.UIColor? = nil, homeBackground: UIKit.UIColor?, tileIcons: [Swift.String]? = nil, extras: FleksyKeyboardSDK.KeyboardTheme.ThemeExtras = ThemeExtras(), sounds: FleksyKeyboardSDK.KeyboardTheme.ThemeSounds? = nil)
  public enum ImagePosition : Swift.String, Swift.Codable {
    case scale
    case center
    case fit
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct ThemeExtras {
    public enum ExtraEffect : Swift.String {
      case systemLike
      case rainbow
      case timeLapse
      case swipeChange
      case chameleon
      public init?(rawValue: Swift.String)
      public typealias RawValue = Swift.String
      public var rawValue: Swift.String {
        get
      }
    }
    public let effect: FleksyKeyboardSDK.KeyboardTheme.ThemeExtras.ExtraEffect
    @available(*, deprecated, message: "Unused. Always false")
    public let isUserTheme: Swift.Bool
    public init(effect: FleksyKeyboardSDK.KeyboardTheme.ThemeExtras.ExtraEffect = .systemLike, isUserTheme: Swift.Bool = false)
  }
  @available(*, deprecated, message: "Use FeedbackConfiguration in KeyboardConfiguration")
  public struct ThemeSounds {
    public let tap: Swift.String?
    @available(*, deprecated, message: "Unused")
    public let verticalSwipe: Swift.String?
    @available(*, deprecated, message: "Unused")
    public let horizontalSwipe: Swift.String?
    public init(tap: Swift.String? = nil, verticalSwipe: Swift.String? = nil, horizontalSwipe: Swift.String? = nil)
  }
  public func toJSONString() -> Swift.String?
}
public struct AppsConfiguration {
  public let keyboardApps: [any FleksyAppsCore.KeyboardApp]
  public let showAppsInCarousel: Swift.Bool
  public init(keyboardApps: [any FleksyAppsCore.KeyboardApp] = [], showAppsInCarousel: Swift.Bool = FleksyManagedSettings.showAppsInCarousel)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor(unsafe) public class FKInputView : UIKit.UIInputView, UIKit.UIInputViewAudioFeedback {
  @objc @_Concurrency.MainActor(unsafe) public var theme: FleksyKeyboardSDK.FleksyTheme? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public func willTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @available(*, deprecated, message: "Instead of calling 'orientationChangeDidBegin(transitionSize:)` and `orientationChangeDidEnd(coordinator:)`, just call `willTransition(to: with:)")
  @objc @_Concurrency.MainActor(unsafe) public func orientationChangeDidBegin(withTransitionSize size: CoreFoundation.CGSize)
  @available(*, deprecated, message: "Instead of calling 'orientationChangeDidBegin(transitionSize:)` and `orientationChangeDidEnd(coordinator:)`, just call `willTransition(to: with:)")
  @objc @_Concurrency.MainActor(unsafe) public func orientationChangeDidEnd(with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func didMoveToSuperview()
  @objc @_Concurrency.MainActor(unsafe) public func refreshKeyboardHeight()
  @objc @_Concurrency.MainActor(unsafe) public func updateCustomHeight(_ height: CoreFoundation.CGFloat)
  @_Concurrency.MainActor(unsafe) @objc public var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension FleksyKeyboardSDK.FKInputView : FleksyKeyboardSDK.FleksyCursorControllable {
  @_Concurrency.MainActor(unsafe) @objc dynamic public var isShowingCursorControl: Swift.Bool {
    @objc get
    @objc set
  }
}
extension FleksyKeyboardSDK.FKInputView : FleksyKeyboardSDK.FleksyViewControllerPresenter {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pullDownGesture(withOffset offset: CoreFoundation.CGFloat, view: UIKit.UIView!, presentedViewController controller: UIKit.UIViewController!)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func pullDownGestureEnded(withOffset offset: CoreFoundation.CGFloat, velocity verticalVelocity: CoreFoundation.CGFloat, view: UIKit.UIView!, presentedViewController controller: UIKit.UIViewController!)
}
extension FleksyKeyboardSDK.KeyboardConfiguration {
  @available(*, deprecated, message: "Use the `dataCapture` property. Returns a dummy `CaptureConfiguration` when `dataCapture` is different from `.sessionBased`")
  @objc dynamic public var capture: FleksyKeyboardSDK.CaptureConfiguration {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Use KeyboardConfiguration initializer in Swift with the style parameter")
  @objc(style) dynamic public var styleObjC: FleksyKeyboardSDK.StyleConfigurationObjC? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Use KeyboardConfiguration initializer in Swift with the emoji parameter")
  @objc(emojiConfig) dynamic public var emojiConfigObjC: FleksyKeyboardSDK.EmojiConfigurationObjC? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  @objc convenience dynamic public init(panel: FleksyKeyboardSDK.PanelConfiguration?, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration?, license: FleksyKeyboardSDK.LicenseConfigurationObjC, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that uses the `dataCapture` parameter. PanelConfiguration API is deprecated and will be removed in a future release. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  @objc convenience dynamic public init(panel: FleksyKeyboardSDK.PanelConfiguration?, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, specialKeys: FleksyKeyboardSDK.SpecialKeysConfiguration?, license: FleksyKeyboardSDK.LicenseConfigurationObjC, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance` parameter. All `AppearanceConfiguration` APIs are deprecated and ignored")
  @objc convenience dynamic public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfigurationObjC, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that does not include the `customView` and `heightCustom` parameters. You can use FleksyApps via AppsConfiguration to have a fully customizable top bar")
  @objc convenience dynamic public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfigurationObjC, debug: FleksyKeyboardSDK.DebugConfiguration?)
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration")
  @objc convenience dynamic public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfigurationObjC)
  @available(*, deprecated, message: "Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration")
  @objc convenience dynamic public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, typing: FleksyKeyboardSDK.TypingConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfigurationObjC)
  @available(*, deprecated, message: "Use an initialization that does not include the `appearance`, `customView` and `heightCustom` parameters. All `AppearanceConfiguration` APIs are deprecated and ignored. For top bar customization, please use FleksyApps via AppsConfiguration")
  @objc convenience dynamic public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, appearance: FleksyKeyboardSDK.AppearanceConfiguration?, license: FleksyKeyboardSDK.LicenseConfigurationObjC)
  @available(*, deprecated, message: "Use an initialization that does not include the `customView` and `heightCustom` parameters. For top bar customization, please use FleksyApps via AppsConfiguration")
  @objc convenience dynamic public init(customView: Swift.Bool, heightCustom: Swift.Float, capture: FleksyKeyboardSDK.CaptureConfiguration?, style: FleksyKeyboardSDK.StyleConfigurationObjC?, license: FleksyKeyboardSDK.LicenseConfigurationObjC)
}
public struct FullDocumentContext {
  public enum Error : Swift.Error {
    case keyboardUninitialized
    case userCancelled
    case cancelled
    case fullDocumentReadInProgress
    case invalidTextDocumentProxy
    case unexpectedlyStopped
    public static func == (a: FleksyKeyboardSDK.FullDocumentContext.Error, b: FleksyKeyboardSDK.FullDocumentContext.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var fullDocumentContextBeforeInput: Swift.String
  public var fullDocumentContextAfterInput: Swift.String
}
extension FleksyKeyboardSDK.MagicButtonAction : Swift.Equatable {}
extension FleksyKeyboardSDK.MagicButtonAction : Swift.Hashable {}
extension FleksyKeyboardSDK.FKKeyboardLicenseCapability : Swift.Equatable {}
extension FleksyKeyboardSDK.FKKeyboardLicenseCapability : Swift.Hashable {}
extension FleksyKeyboardSDK.FKKeyboardLicenseCapability : Swift.RawRepresentable {}
extension FleksyKeyboardSDK.FKKeyboardActivationStatus : Swift.Equatable {}
extension FleksyKeyboardSDK.FKKeyboardActivationStatus : Swift.Hashable {}
extension FleksyKeyboardSDK.FKKeyboardActivationStatus : Swift.RawRepresentable {}
extension FleksyKeyboardSDK.LanguageResourceType : Swift.Equatable {}
extension FleksyKeyboardSDK.LanguageResourceType : Swift.Hashable {}
extension FleksyKeyboardSDK.LanguageResourceType : Swift.RawRepresentable {}
extension FleksyKeyboardSDK.StyleConfiguration.KeyboardSize : Swift.Equatable {}
extension FleksyKeyboardSDK.StyleConfiguration.KeyboardSize : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyType : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyType : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyArea : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyStroke.KeyArea : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.Delete.DeleteDataType : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.Delete.DeleteDataType : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyPlane.KeyboardPlaneType : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.KeyPlane.KeyboardPlaneType : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.Word.AutocorrectionType : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.Word.AutocorrectionType : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.SessionUpdate.TextFieldType : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.SessionUpdate.TextFieldType : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Status : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Status : Swift.Hashable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Regime : Swift.Equatable {}
extension FleksyKeyboardSDK.EventBasedDataCaptureEvent.StressUpdate.Regime : Swift.Hashable {}
extension FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone : Swift.Equatable {}
extension FleksyKeyboardSDK.EmojiConfiguration.EmojiSkinTone : Swift.Hashable {}
extension FleksyKeyboardSDK.FKInterfaceInputViewController : FleksyKeyboardSDK.FleksyJapaneseKeyboardStatusProvider {}
extension FleksyKeyboardSDK.FKInterfaceInputViewController : FleksyKeyboardSDK.FleksyFontProvider {}
extension FleksyKeyboardSDK.FKInterfaceInputViewController : FleksyKeyboardSDK.FleksyViewControllerPresenter {}
extension FleksyKeyboardSDK.KeyboardTheme.ImagePosition : Swift.Equatable {}
extension FleksyKeyboardSDK.KeyboardTheme.ImagePosition : Swift.Hashable {}
extension FleksyKeyboardSDK.KeyboardTheme.ImagePosition : Swift.RawRepresentable {}
extension FleksyKeyboardSDK.KeyboardTheme.ThemeExtras.ExtraEffect : Swift.Equatable {}
extension FleksyKeyboardSDK.KeyboardTheme.ThemeExtras.ExtraEffect : Swift.Hashable {}
extension FleksyKeyboardSDK.KeyboardTheme.ThemeExtras.ExtraEffect : Swift.RawRepresentable {}
extension FleksyKeyboardSDK.FullDocumentContext.Error : Swift.Equatable {}
extension FleksyKeyboardSDK.FullDocumentContext.Error : Swift.Hashable {}
